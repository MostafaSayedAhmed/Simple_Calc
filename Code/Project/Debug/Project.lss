
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  00003888  0000391c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800224  00800224  00003ae0  2**0
                  ALLOC
  3 .stab         00002e50  00000000  00000000  00003ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a69  00000000  00000000  00006930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008399  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00008539  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00008729  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000ab35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000beac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000d244  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000d537  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__vector_1>
       8:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_2>
       c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <main>
      8a:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ec       	ldi	r26, 0xC3	; 195
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 1c 	jmp	0x384e	; 0x384e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ec       	ldi	r24, 0xC3	; 195
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 1c 	jmp	0x384e	; 0x384e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 ec       	ldi	r22, 0xC3	; 195
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e5 53       	subi	r30, 0x35	; 53
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Interrupt_Enable>:
static void (*p2fun_INT0)() = 0 ;
static void (*p2fun_INT1)() = 0 ;
static void (*p2fun_INT2)() = 0 ;

void Interrupt_Enable()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     e00:	af e5       	ldi	r26, 0x5F	; 95
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	ef e5       	ldi	r30, 0x5F	; 95
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
     #if INT_0 == ENABLE
	    SET_BIT(GICR,INT0);
     e0e:	ab e5       	ldi	r26, 0x5B	; 91
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	eb e5       	ldi	r30, 0x5B	; 91
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	80 64       	ori	r24, 0x40	; 64
     e1a:	8c 93       	st	X, r24
       #if INT0_CONTROL == LOW_LEVEL
	      CLR_BIT(MCUCR,ISC00);
	      CLR_BIT(MCUCR,ISC01);
       #elif INT0_CONTROL == ANY_CHANGE
	      SET_BIT(MCUCR,ISC00);
     e1c:	a5 e5       	ldi	r26, 0x55	; 85
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e5 e5       	ldi	r30, 0x55	; 85
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c 93       	st	X, r24
	      CLR_BIT(MCUCR,ISC01);
     e2a:	a5 e5       	ldi	r26, 0x55	; 85
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e5       	ldi	r30, 0x55	; 85
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8d 7f       	andi	r24, 0xFD	; 253
     e36:	8c 93       	st	X, r24
      #else
	      CLR_BIT(GICR,INT0);
     #endif

       #if INT_1 == ENABLE
         SET_BIT(GICR,INT1);
     e38:	ab e5       	ldi	r26, 0x5B	; 91
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	eb e5       	ldi	r30, 0x5B	; 91
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	8c 93       	st	X, r24
            CLR_BIT(MCUCR,ISC11);
        #elif INT1_CONTROL == FALL_EDGE
            CLR_BIT(MCUCR,ISC10);
            SET_BIT(MCUCR,ISC11);
        #elif INT1_CONTROL == RISE_EDGE
            SET_BIT(MCUCR,ISC10);
     e46:	a5 e5       	ldi	r26, 0x55	; 85
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e5       	ldi	r30, 0x55	; 85
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	84 60       	ori	r24, 0x04	; 4
     e52:	8c 93       	st	X, r24
            SET_BIT(MCUCR,ISC11);
     e54:	a5 e5       	ldi	r26, 0x55	; 85
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e5       	ldi	r30, 0x55	; 85
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 60       	ori	r24, 0x08	; 8
     e60:	8c 93       	st	X, r24
       #else
           CLR_BIT(GICR,INT1);
     #endif

       #if INT_2 == ENABLE
          SET_BIT(GICR,INT2);
     e62:	ab e5       	ldi	r26, 0x5B	; 91
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	eb e5       	ldi	r30, 0x5B	; 91
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	80 62       	ori	r24, 0x20	; 32
     e6e:	8c 93       	st	X, r24
        #if INT2_CONTROL == FALL_EDGE_INT2
           CLR_BIT(MCUCSR,ISC2);
        #elif INT2_CONTROL == RISE_EDGE_INT2
           SET_BIT(MCUCSR,ISC2);
     e70:	a4 e5       	ldi	r26, 0x54	; 84
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e4 e5       	ldi	r30, 0x54	; 84
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 64       	ori	r24, 0x40	; 64
     e7c:	8c 93       	st	X, r24
       #else
           CLR_BIT(GICR,INT2);
       #endif


}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <SetCallbackFunction_INT0>:

void SetCallbackFunction_INT0(void (*fun)()){
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <SetCallbackFunction_INT0+0x6>
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
	p2fun_INT0 = fun;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	90 93 25 02 	sts	0x0225, r25
     e9a:	80 93 24 02 	sts	0x0224, r24
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <SetCallbackFunction_INT1>:

void SetCallbackFunction_INT1(void (*fun)()){
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <SetCallbackFunction_INT1+0x6>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	p2fun_INT1 = fun;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	90 93 27 02 	sts	0x0227, r25
     ebe:	80 93 26 02 	sts	0x0226, r24
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <SetCallbackFunction_INT2>:

void SetCallbackFunction_INT2(void (*fun)()){
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <SetCallbackFunction_INT2+0x6>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
	p2fun_INT2 = fun;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	90 93 29 02 	sts	0x0229, r25
     ee2:	80 93 28 02 	sts	0x0228, r24
}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <__vector_1>:

ISR(INT0_vect)
{
     ef0:	1f 92       	push	r1
     ef2:	0f 92       	push	r0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	if(p2fun_INT0 != 0) p2fun_INT0();
     f1a:	80 91 24 02 	lds	r24, 0x0224
     f1e:	90 91 25 02 	lds	r25, 0x0225
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	29 f0       	breq	.+10     	; 0xf30 <__vector_1+0x40>
     f26:	e0 91 24 02 	lds	r30, 0x0224
     f2a:	f0 91 25 02 	lds	r31, 0x0225
     f2e:	09 95       	icall


}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	ff 91       	pop	r31
     f36:	ef 91       	pop	r30
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <__vector_2>:
ISR(INT1_vect)
{
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	if(p2fun_INT1 != 0) p2fun_INT1();
     f80:	80 91 26 02 	lds	r24, 0x0226
     f84:	90 91 27 02 	lds	r25, 0x0227
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	29 f0       	breq	.+10     	; 0xf96 <__vector_2+0x40>
     f8c:	e0 91 26 02 	lds	r30, 0x0226
     f90:	f0 91 27 02 	lds	r31, 0x0227
     f94:	09 95       	icall

}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <__vector_3>:
ISR(INT2_vect)
{
     fbc:	1f 92       	push	r1
     fbe:	0f 92       	push	r0
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	0f 92       	push	r0
     fc4:	11 24       	eor	r1, r1
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	if(p2fun_INT2 != 0) p2fun_INT2();
     fe6:	80 91 28 02 	lds	r24, 0x0228
     fea:	90 91 29 02 	lds	r25, 0x0229
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	29 f0       	breq	.+10     	; 0xffc <__vector_3+0x40>
     ff2:	e0 91 28 02 	lds	r30, 0x0228
     ff6:	f0 91 29 02 	lds	r31, 0x0229
     ffa:	09 95       	icall
}
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <DIO_init>:




void DIO_init()
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <DIO_init+0x6>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    102c:	1a 82       	std	Y+2, r1	; 0x02
    102e:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; i < PIN_COUNT ;i++)
    1030:	1a 82       	std	Y+2, r1	; 0x02
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	70 c2       	rjmp	.+1248   	; 0x1516 <DIO_init+0x4f4>
	{
		if(Pins_list[i].Port == PORT_A )
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	fc 01       	movw	r30, r24
    1044:	e5 53       	subi	r30, 0x35	; 53
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_init+0x2e>
    104e:	8e c0       	rjmp	.+284    	; 0x116c <DIO_init+0x14a>
		{
			if(Pins_list[i].Dir == OUTPUT)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	fc 01       	movw	r30, r24
    1060:	e5 53       	subi	r30, 0x35	; 53
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	80 81       	ld	r24, Z
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	e9 f4       	brne	.+58     	; 0x10a4 <DIO_init+0x82>
				{
				SET_BIT(DDRA,Pins_list[i].Pin);
    106a:	aa e3       	ldi	r26, 0x3A	; 58
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ea e3       	ldi	r30, 0x3A	; 58
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	fc 01       	movw	r30, r24
    1084:	e4 53       	subi	r30, 0x34	; 52
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_init+0x78>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_init+0x74>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	34 c2       	rjmp	.+1128   	; 0x150c <DIO_init+0x4ea>
				}
			else
				{
				CLR_BIT(DDRA,Pins_list[i].Pin);
    10a4:	aa e3       	ldi	r26, 0x3A	; 58
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ea e3       	ldi	r30, 0x3A	; 58
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	fc 01       	movw	r30, r24
    10be:	e4 53       	subi	r30, 0x34	; 52
    10c0:	fe 4f       	sbci	r31, 0xFE	; 254
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_init+0xb2>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_init+0xae>
    10d8:	80 95       	com	r24
    10da:	84 23       	and	r24, r20
    10dc:	8c 93       	st	X, r24
				if(Pins_list[i].Pullup == PULLUP_ON){
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 53       	subi	r30, 0x32	; 50
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	80 81       	ld	r24, Z
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	e9 f4       	brne	.+58     	; 0x1130 <DIO_init+0x10e>
					SET_BIT(PORTA,Pins_list[i].Pin);
    10f6:	ab e3       	ldi	r26, 0x3B	; 59
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	fc 01       	movw	r30, r24
    1110:	e4 53       	subi	r30, 0x34	; 52
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_init+0x104>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_init+0x100>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	ee c1       	rjmp	.+988    	; 0x150c <DIO_init+0x4ea>
				}
				else
				{
					CLR_BIT(PORTA,Pins_list[i].Pin);
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	fc 01       	movw	r30, r24
    114a:	e4 53       	subi	r30, 0x34	; 52
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_init+0x13e>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_init+0x13a>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	d0 c1       	rjmp	.+928    	; 0x150c <DIO_init+0x4ea>
				}
				}
		}
		else if(Pins_list[i].Port == PORT_B )
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	fc 01       	movw	r30, r24
    117a:	e5 53       	subi	r30, 0x35	; 53
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	80 81       	ld	r24, Z
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	09 f0       	breq	.+2      	; 0x1186 <DIO_init+0x164>
    1184:	8e c0       	rjmp	.+284    	; 0x12a2 <DIO_init+0x280>
		{
			if(Pins_list[i].Dir == OUTPUT)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	fc 01       	movw	r30, r24
    1196:	e5 53       	subi	r30, 0x35	; 53
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	80 81       	ld	r24, Z
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	e9 f4       	brne	.+58     	; 0x11da <DIO_init+0x1b8>
				{
			     SET_BIT(DDRB,Pins_list[i].Pin);
    11a0:	a7 e3       	ldi	r26, 0x37	; 55
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e7 e3       	ldi	r30, 0x37	; 55
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	fc 01       	movw	r30, r24
    11ba:	e4 53       	subi	r30, 0x34	; 52
    11bc:	fe 4f       	sbci	r31, 0xFE	; 254
    11be:	80 81       	ld	r24, Z
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_init+0x1ae>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_init+0x1aa>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	99 c1       	rjmp	.+818    	; 0x150c <DIO_init+0x4ea>
				}
			else
				{
				CLR_BIT(DDRB,Pins_list[i].Pin);
    11da:	a7 e3       	ldi	r26, 0x37	; 55
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e7 e3       	ldi	r30, 0x37	; 55
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	fc 01       	movw	r30, r24
    11f4:	e4 53       	subi	r30, 0x34	; 52
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	80 81       	ld	r24, Z
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_init+0x1e8>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_init+0x1e4>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
				if(Pins_list[i].Pullup == PULLUP_ON){
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	fc 01       	movw	r30, r24
    1222:	e2 53       	subi	r30, 0x32	; 50
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	80 81       	ld	r24, Z
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	e9 f4       	brne	.+58     	; 0x1266 <DIO_init+0x244>
					SET_BIT(PORTB,Pins_list[i].Pin);
    122c:	a8 e3       	ldi	r26, 0x38	; 56
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	fc 01       	movw	r30, r24
    1246:	e4 53       	subi	r30, 0x34	; 52
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	80 81       	ld	r24, Z
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_init+0x23a>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_init+0x236>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	53 c1       	rjmp	.+678    	; 0x150c <DIO_init+0x4ea>
				}
				else
				{
					CLR_BIT(PORTB,Pins_list[i].Pin);
    1266:	a8 e3       	ldi	r26, 0x38	; 56
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	fc 01       	movw	r30, r24
    1280:	e4 53       	subi	r30, 0x34	; 52
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_init+0x274>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_init+0x270>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	35 c1       	rjmp	.+618    	; 0x150c <DIO_init+0x4ea>
				}
				}
		}
		else if(Pins_list[i].Port == PORT_C )
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	9a 81       	ldd	r25, Y+2	; 0x02
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	fc 01       	movw	r30, r24
    12b0:	e5 53       	subi	r30, 0x35	; 53
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 81       	ld	r24, Z
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	09 f0       	breq	.+2      	; 0x12bc <DIO_init+0x29a>
    12ba:	8e c0       	rjmp	.+284    	; 0x13d8 <DIO_init+0x3b6>
		{
			if(Pins_list[i].Dir == OUTPUT)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	fc 01       	movw	r30, r24
    12cc:	e5 53       	subi	r30, 0x35	; 53
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	80 81       	ld	r24, Z
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	e9 f4       	brne	.+58     	; 0x1310 <DIO_init+0x2ee>
				{
				SET_BIT(DDRC,Pins_list[i].Pin);
    12d6:	a4 e3       	ldi	r26, 0x34	; 52
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	fc 01       	movw	r30, r24
    12f0:	e4 53       	subi	r30, 0x34	; 52
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_init+0x2e4>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_init+0x2e0>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	fe c0       	rjmp	.+508    	; 0x150c <DIO_init+0x4ea>
				}
			else
				{
				CLR_BIT(DDRC,Pins_list[i].Pin);
    1310:	a4 e3       	ldi	r26, 0x34	; 52
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e4 e3       	ldi	r30, 0x34	; 52
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	fc 01       	movw	r30, r24
    132a:	e4 53       	subi	r30, 0x34	; 52
    132c:	fe 4f       	sbci	r31, 0xFE	; 254
    132e:	80 81       	ld	r24, Z
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_init+0x31e>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_init+0x31a>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
				if(Pins_list[i].Pullup == PULLUP_ON){
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	fc 01       	movw	r30, r24
    1358:	e2 53       	subi	r30, 0x32	; 50
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 81       	ld	r24, Z
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	e9 f4       	brne	.+58     	; 0x139c <DIO_init+0x37a>
					SET_BIT(PORTC,Pins_list[i].Pin);
    1362:	a5 e3       	ldi	r26, 0x35	; 53
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e3       	ldi	r30, 0x35	; 53
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	fc 01       	movw	r30, r24
    137c:	e4 53       	subi	r30, 0x34	; 52
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_init+0x370>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_init+0x36c>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	b8 c0       	rjmp	.+368    	; 0x150c <DIO_init+0x4ea>
				}
				else
				{
					CLR_BIT(PORTC,Pins_list[i].Pin);
    139c:	a5 e3       	ldi	r26, 0x35	; 53
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	fc 01       	movw	r30, r24
    13b6:	e4 53       	subi	r30, 0x34	; 52
    13b8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_init+0x3aa>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_init+0x3a6>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	9a c0       	rjmp	.+308    	; 0x150c <DIO_init+0x4ea>
				}
				}
		}
		else if(Pins_list[i].Port == PORT_D )
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	fc 01       	movw	r30, r24
    13e6:	e5 53       	subi	r30, 0x35	; 53
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	80 81       	ld	r24, Z
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <DIO_init+0x3d0>
    13f0:	8d c0       	rjmp	.+282    	; 0x150c <DIO_init+0x4ea>
		{
			if(Pins_list[i].Dir == OUTPUT)
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	9a 81       	ldd	r25, Y+2	; 0x02
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	fc 01       	movw	r30, r24
    1402:	e5 53       	subi	r30, 0x35	; 53
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	80 81       	ld	r24, Z
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	e9 f4       	brne	.+58     	; 0x1446 <DIO_init+0x424>
				{
				SET_BIT(DDRD,Pins_list[i].Pin);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	9a 81       	ldd	r25, Y+2	; 0x02
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	fc 01       	movw	r30, r24
    1426:	e4 53       	subi	r30, 0x34	; 52
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	80 81       	ld	r24, Z
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_init+0x41a>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_init+0x416>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	63 c0       	rjmp	.+198    	; 0x150c <DIO_init+0x4ea>
				}
			else
				{
				CLR_BIT(DDRD,Pins_list[i].Pin);
    1446:	a1 e3       	ldi	r26, 0x31	; 49
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e1 e3       	ldi	r30, 0x31	; 49
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	fc 01       	movw	r30, r24
    1460:	e4 53       	subi	r30, 0x34	; 52
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_init+0x454>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_init+0x450>
    147a:	80 95       	com	r24
    147c:	84 23       	and	r24, r20
    147e:	8c 93       	st	X, r24
				if(Pins_list[i].Pullup == PULLUP_ON){
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	fc 01       	movw	r30, r24
    148e:	e2 53       	subi	r30, 0x32	; 50
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	80 81       	ld	r24, Z
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	e9 f4       	brne	.+58     	; 0x14d2 <DIO_init+0x4b0>
					SET_BIT(PORTD,Pins_list[i].Pin);
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	fc 01       	movw	r30, r24
    14b2:	e4 53       	subi	r30, 0x34	; 52
    14b4:	fe 4f       	sbci	r31, 0xFE	; 254
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_init+0x4a6>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_init+0x4a2>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	1d c0       	rjmp	.+58     	; 0x150c <DIO_init+0x4ea>
				}
				else
				{
					CLR_BIT(PORTD,Pins_list[i].Pin);
    14d2:	a2 e3       	ldi	r26, 0x32	; 50
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e2 e3       	ldi	r30, 0x32	; 50
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	fc 01       	movw	r30, r24
    14ec:	e4 53       	subi	r30, 0x34	; 52
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_init+0x4e0>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_init+0x4dc>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24


void DIO_init()
{
	int i = 0;
	for(i = 0 ; i < PIN_COUNT ;i++)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	9a 81       	ldd	r25, Y+2	; 0x02
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	82 31       	cpi	r24, 0x12	; 18
    151c:	91 05       	cpc	r25, r1
    151e:	0c f4       	brge	.+2      	; 0x1522 <DIO_init+0x500>
    1520:	8a cd       	rjmp	.-1260   	; 0x1036 <DIO_init+0x14>
					CLR_BIT(PORTD,Pins_list[i].Pin);
				}
				}
		}
	}
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <DIO_Write>:

void DIO_Write(channel_type channel, DIO_Level level )
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <DIO_Write+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <DIO_Write+0x8>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	8b 83       	std	Y+3, r24	; 0x03
    153a:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port Port = channel/8;
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	86 95       	lsr	r24
    1540:	86 95       	lsr	r24
    1542:	86 95       	lsr	r24
    1544:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin Pin = channel%8;
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	87 70       	andi	r24, 0x07	; 7
    154a:	89 83       	std	Y+1, r24	; 0x01
	if(Port == PORT_A)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	88 23       	and	r24, r24
    1550:	59 f5       	brne	.+86     	; 0x15a8 <DIO_Write+0x7c>
	{
	if(level == HIGH) SET_BIT(PORTA,Pin);
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	a1 f4       	brne	.+40     	; 0x1580 <DIO_Write+0x54>
    1558:	ab e3       	ldi	r26, 0x3B	; 59
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_Write+0x4a>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_Write+0x46>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <DIO_Write+0x7c>
	else CLR_BIT(PORTA,Pin);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_Write+0x72>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_Write+0x6e>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
	}
	if(Port == PORT_B)
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	59 f5       	brne	.+86     	; 0x1604 <DIO_Write+0xd8>
	{
	if(level == HIGH) SET_BIT(PORTB,Pin);
    15ae:	8c 81       	ldd	r24, Y+4	; 0x04
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	a1 f4       	brne	.+40     	; 0x15dc <DIO_Write+0xb0>
    15b4:	a8 e3       	ldi	r26, 0x38	; 56
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 e3       	ldi	r30, 0x38	; 56
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_Write+0xa6>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_Write+0xa2>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	14 c0       	rjmp	.+40     	; 0x1604 <DIO_Write+0xd8>
	else CLR_BIT(PORTB,Pin);
    15dc:	a8 e3       	ldi	r26, 0x38	; 56
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e8 e3       	ldi	r30, 0x38	; 56
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_Write+0xce>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_Write+0xca>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
	}
	if(Port == PORT_C)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	82 30       	cpi	r24, 0x02	; 2
    1608:	59 f5       	brne	.+86     	; 0x1660 <DIO_Write+0x134>
	{
	if(level == HIGH) SET_BIT(PORTC,Pin);
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	a1 f4       	brne	.+40     	; 0x1638 <DIO_Write+0x10c>
    1610:	a5 e3       	ldi	r26, 0x35	; 53
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e3       	ldi	r30, 0x35	; 53
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_Write+0x102>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_Write+0xfe>
    1632:	84 2b       	or	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <DIO_Write+0x134>
	else CLR_BIT(PORTC,Pin);
    1638:	a5 e3       	ldi	r26, 0x35	; 53
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e3       	ldi	r30, 0x35	; 53
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_Write+0x12a>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_Write+0x126>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
	}
	if(Port == PORT_D)
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	59 f5       	brne	.+86     	; 0x16bc <DIO_Write+0x190>
	{
	if(level == HIGH) SET_BIT(PORTD,Pin);
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	a1 f4       	brne	.+40     	; 0x1694 <DIO_Write+0x168>
    166c:	a2 e3       	ldi	r26, 0x32	; 50
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e2 e3       	ldi	r30, 0x32	; 50
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_Write+0x15e>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_Write+0x15a>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <DIO_Write+0x190>
	else CLR_BIT(PORTD,Pin);
    1694:	a2 e3       	ldi	r26, 0x32	; 50
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_Write+0x186>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_Write+0x182>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
	}
}
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <DIO_Read>:


DIO_Level DIO_Read(channel_type channel)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <DIO_Read+0x6>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_Read+0x8>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port Port = channel/8;
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	86 95       	lsr	r24
    16dc:	86 95       	lsr	r24
    16de:	86 95       	lsr	r24
    16e0:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Pin Pin = channel%8;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	87 70       	andi	r24, 0x07	; 7
    16e6:	89 83       	std	Y+1, r24	; 0x01
	if      (Port == PORT_A)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	88 23       	and	r24, r24
    16ec:	c1 f4       	brne	.+48     	; 0x171e <DIO_Read+0x54>
	{
		if(GET_BIT(PINA,Pin) == 0) return LOW;
    16ee:	e9 e3       	ldi	r30, 0x39	; 57
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_Read+0x3c>
    1702:	55 95       	asr	r21
    1704:	47 95       	ror	r20
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_Read+0x38>
    170a:	ca 01       	movw	r24, r20
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	90 70       	andi	r25, 0x00	; 0
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	11 f4       	brne	.+4      	; 0x1718 <DIO_Read+0x4e>
    1714:	1c 82       	std	Y+4, r1	; 0x04
    1716:	50 c0       	rjmp	.+160    	; 0x17b8 <DIO_Read+0xee>
		else                        return HIGH;
    1718:	51 e0       	ldi	r21, 0x01	; 1
    171a:	5c 83       	std	Y+4, r21	; 0x04
    171c:	4d c0       	rjmp	.+154    	; 0x17b8 <DIO_Read+0xee>
	}

	else if (Port == PORT_B)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	c1 f4       	brne	.+48     	; 0x1754 <DIO_Read+0x8a>
	{
		if(GET_BIT(PINB,Pin) == 0)  return LOW;
    1724:	e6 e3       	ldi	r30, 0x36	; 54
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	a9 01       	movw	r20, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_Read+0x72>
    1738:	55 95       	asr	r21
    173a:	47 95       	ror	r20
    173c:	8a 95       	dec	r24
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_Read+0x6e>
    1740:	ca 01       	movw	r24, r20
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	90 70       	andi	r25, 0x00	; 0
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	11 f4       	brne	.+4      	; 0x174e <DIO_Read+0x84>
    174a:	1c 82       	std	Y+4, r1	; 0x04
    174c:	35 c0       	rjmp	.+106    	; 0x17b8 <DIO_Read+0xee>
		else                        return HIGH;
    174e:	51 e0       	ldi	r21, 0x01	; 1
    1750:	5c 83       	std	Y+4, r21	; 0x04
    1752:	32 c0       	rjmp	.+100    	; 0x17b8 <DIO_Read+0xee>
	}
	else if (Port == PORT_C)
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	c1 f4       	brne	.+48     	; 0x178a <DIO_Read+0xc0>
	{
		if(GET_BIT(PINC,Pin) == 0) return LOW;
    175a:	e3 e3       	ldi	r30, 0x33	; 51
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a9 01       	movw	r20, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_Read+0xa8>
    176e:	55 95       	asr	r21
    1770:	47 95       	ror	r20
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_Read+0xa4>
    1776:	ca 01       	movw	r24, r20
    1778:	81 70       	andi	r24, 0x01	; 1
    177a:	90 70       	andi	r25, 0x00	; 0
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	11 f4       	brne	.+4      	; 0x1784 <DIO_Read+0xba>
    1780:	1c 82       	std	Y+4, r1	; 0x04
    1782:	1a c0       	rjmp	.+52     	; 0x17b8 <DIO_Read+0xee>
		else                        return HIGH;
    1784:	51 e0       	ldi	r21, 0x01	; 1
    1786:	5c 83       	std	Y+4, r21	; 0x04
    1788:	17 c0       	rjmp	.+46     	; 0x17b8 <DIO_Read+0xee>
	}
	else
	{
		if(GET_BIT(PIND,Pin) == 0) return LOW;
    178a:	e0 e3       	ldi	r30, 0x30	; 48
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_Read+0xd8>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_Read+0xd4>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	90 70       	andi	r25, 0x00	; 0
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	11 f4       	brne	.+4      	; 0x17b4 <DIO_Read+0xea>
    17b0:	1c 82       	std	Y+4, r1	; 0x04
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_Read+0xee>
		else                        return HIGH;
    17b4:	51 e0       	ldi	r21, 0x01	; 1
    17b6:	5c 83       	std	Y+4, r21	; 0x04
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <Seg7_init>:
 *      Author: Mostafa Sayed
 */
#include "7Seg.h"

void Seg7_init()
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	28 97       	sbiw	r28, 0x08	; 8
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
	{
		for(int i=0 ; i<7;i++) SET_BIT(DDRB,i);
	}
	else if(seg7Port == PORT_C)
		{
		for(int i=0 ; i<7;i++) SET_BIT(DDRC,i);
    17dc:	1c 82       	std	Y+4, r1	; 0x04
    17de:	1b 82       	std	Y+3, r1	; 0x03
    17e0:	15 c0       	rjmp	.+42     	; 0x180c <Seg7_init+0x44>
    17e2:	a4 e3       	ldi	r26, 0x34	; 52
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e4 e3       	ldi	r30, 0x34	; 52
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	28 2f       	mov	r18, r24
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0b 80       	ldd	r0, Y+3	; 0x03
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <Seg7_init+0x32>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <Seg7_init+0x2e>
    17fe:	82 2b       	or	r24, r18
    1800:	8c 93       	st	X, r24
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	87 30       	cpi	r24, 0x07	; 7
    1812:	91 05       	cpc	r25, r1
    1814:	34 f3       	brlt	.-52     	; 0x17e2 <Seg7_init+0x1a>
	else if(seg7Port == PORT_D)
		{
		for(int i=0 ; i<7;i++) SET_BIT(DDRD,i);
		}

}
    1816:	28 96       	adiw	r28, 0x08	; 8
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <Seg7_Write>:

void Seg7_Write(unit8 Num)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
	GET_BIT(Num,0) ? DIO_Write(a,HIGH) : DIO_Write(a,LOW);
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	81 70       	andi	r24, 0x01	; 1
    183c:	90 70       	andi	r25, 0x00	; 0
    183e:	88 23       	and	r24, r24
    1840:	29 f0       	breq	.+10     	; 0x184c <Seg7_Write+0x24>
    1842:	80 e1       	ldi	r24, 0x10	; 16
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <Seg7_Write+0x2c>
    184c:	80 e1       	ldi	r24, 0x10	; 16
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,1) ? DIO_Write(b,HIGH) : DIO_Write(b,LOW);
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	86 95       	lsr	r24
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	81 70       	andi	r24, 0x01	; 1
    185e:	90 70       	andi	r25, 0x00	; 0
    1860:	88 23       	and	r24, r24
    1862:	29 f0       	breq	.+10     	; 0x186e <Seg7_Write+0x46>
    1864:	81 e1       	ldi	r24, 0x11	; 17
    1866:	61 e0       	ldi	r22, 0x01	; 1
    1868:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <Seg7_Write+0x4e>
    186e:	81 e1       	ldi	r24, 0x11	; 17
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,2) ? DIO_Write(c,HIGH) : DIO_Write(c,LOW);
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	86 95       	lsr	r24
    187a:	86 95       	lsr	r24
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	81 70       	andi	r24, 0x01	; 1
    1882:	90 70       	andi	r25, 0x00	; 0
    1884:	88 23       	and	r24, r24
    1886:	29 f0       	breq	.+10     	; 0x1892 <Seg7_Write+0x6a>
    1888:	82 e1       	ldi	r24, 0x12	; 18
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1890:	04 c0       	rjmp	.+8      	; 0x189a <Seg7_Write+0x72>
    1892:	82 e1       	ldi	r24, 0x12	; 18
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,3) ? DIO_Write(d,HIGH) : DIO_Write(d,LOW);
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	86 95       	lsr	r24
    189e:	86 95       	lsr	r24
    18a0:	86 95       	lsr	r24
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	88 23       	and	r24, r24
    18ac:	29 f0       	breq	.+10     	; 0x18b8 <Seg7_Write+0x90>
    18ae:	83 e1       	ldi	r24, 0x13	; 19
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <Seg7_Write+0x98>
    18b8:	83 e1       	ldi	r24, 0x13	; 19
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,4) ? DIO_Write(e,HIGH) : DIO_Write(e,LOW);
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	82 95       	swap	r24
    18c4:	8f 70       	andi	r24, 0x0F	; 15
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	90 70       	andi	r25, 0x00	; 0
    18ce:	88 23       	and	r24, r24
    18d0:	29 f0       	breq	.+10     	; 0x18dc <Seg7_Write+0xb4>
    18d2:	84 e1       	ldi	r24, 0x14	; 20
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <Seg7_Write+0xbc>
    18dc:	84 e1       	ldi	r24, 0x14	; 20
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,5) ? DIO_Write(f,HIGH) : DIO_Write(f,LOW);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	82 95       	swap	r24
    18e8:	86 95       	lsr	r24
    18ea:	87 70       	andi	r24, 0x07	; 7
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	90 70       	andi	r25, 0x00	; 0
    18f4:	88 23       	and	r24, r24
    18f6:	29 f0       	breq	.+10     	; 0x1902 <Seg7_Write+0xda>
    18f8:	85 e1       	ldi	r24, 0x15	; 21
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1900:	04 c0       	rjmp	.+8      	; 0x190a <Seg7_Write+0xe2>
    1902:	85 e1       	ldi	r24, 0x15	; 21
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,6) ? DIO_Write(g,HIGH) : DIO_Write(g,LOW);
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	82 95       	swap	r24
    190e:	86 95       	lsr	r24
    1910:	86 95       	lsr	r24
    1912:	83 70       	andi	r24, 0x03	; 3
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	90 70       	andi	r25, 0x00	; 0
    191c:	88 23       	and	r24, r24
    191e:	29 f0       	breq	.+10     	; 0x192a <Seg7_Write+0x102>
    1920:	86 e1       	ldi	r24, 0x16	; 22
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <Seg7_Write+0x10a>
    192a:	86 e1       	ldi	r24, 0x16	; 22
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	GET_BIT(Num,7) ? DIO_Write(EN,HIGH) : DIO_Write(EN,LOW);
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <Seg7_Write+0x11a>
    1938:	87 e1       	ldi	r24, 0x17	; 23
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1940:	04 c0       	rjmp	.+8      	; 0x194a <Seg7_Write+0x122>
    1942:	87 e1       	ldi	r24, 0x17	; 23
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
}
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <Trigger>:
#include "LCD.h"
#include <util/delay.h>
#include "../../Units.h"

static void Trigger()
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	a6 97       	sbiw	r28, 0x26	; 38
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
	  DIO_Write(E,HIGH);
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e0       	ldi	r26, 0x00	; 0
    1974:	b0 e4       	ldi	r27, 0x40	; 64
    1976:	8b a3       	std	Y+35, r24	; 0x23
    1978:	9c a3       	std	Y+36, r25	; 0x24
    197a:	ad a3       	std	Y+37, r26	; 0x25
    197c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	6b a1       	ldd	r22, Y+35	; 0x23
    1980:	7c a1       	ldd	r23, Y+36	; 0x24
    1982:	8d a1       	ldd	r24, Y+37	; 0x25
    1984:	9e a1       	ldd	r25, Y+38	; 0x26
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8f 8f       	std	Y+31, r24	; 0x1f
    1998:	98 a3       	std	Y+32, r25	; 0x20
    199a:	a9 a3       	std	Y+33, r26	; 0x21
    199c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    199e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19a0:	78 a1       	ldd	r23, Y+32	; 0x20
    19a2:	89 a1       	ldd	r24, Y+33	; 0x21
    19a4:	9a a1       	ldd	r25, Y+34	; 0x22
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <Trigger+0x6e>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9e 8f       	std	Y+30, r25	; 0x1e
    19bc:	8d 8f       	std	Y+29, r24	; 0x1d
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <Trigger+0xec>
	else if (__tmp > 65535)
    19c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19c2:	78 a1       	ldd	r23, Y+32	; 0x20
    19c4:	89 a1       	ldd	r24, Y+33	; 0x21
    19c6:	9a a1       	ldd	r25, Y+34	; 0x22
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <Trigger+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	6b a1       	ldd	r22, Y+35	; 0x23
    19da:	7c a1       	ldd	r23, Y+36	; 0x24
    19dc:	8d a1       	ldd	r24, Y+37	; 0x25
    19de:	9e a1       	ldd	r25, Y+38	; 0x26
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 8f       	std	Y+30, r25	; 0x1e
    19fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <Trigger+0xce>
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 8f       	std	Y+28, r25	; 0x1c
    1a08:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <Trigger+0xbc>
    1a12:	9c 8f       	std	Y+28, r25	; 0x1c
    1a14:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <Trigger+0xb0>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <Trigger+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a2c:	78 a1       	ldd	r23, Y+32	; 0x20
    1a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a30:	9a a1       	ldd	r25, Y+34	; 0x22
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a42:	9a 8f       	std	Y+26, r25	; 0x1a
    1a44:	89 8f       	std	Y+25, r24	; 0x19
    1a46:	89 8d       	ldd	r24, Y+25	; 0x19
    1a48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <Trigger+0xf8>
    1a4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a50:	89 8f       	std	Y+25, r24	; 0x19
	  _delay_ms(2);
	  DIO_Write(E,LOW);
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 ea       	ldi	r26, 0xA0	; 160
    1a60:	b1 e4       	ldi	r27, 0x41	; 65
    1a62:	8d 8b       	std	Y+21, r24	; 0x15
    1a64:	9e 8b       	std	Y+22, r25	; 0x16
    1a66:	af 8b       	std	Y+23, r26	; 0x17
    1a68:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	2b ea       	ldi	r18, 0xAB	; 171
    1a74:	3a ea       	ldi	r19, 0xAA	; 170
    1a76:	4a e2       	ldi	r20, 0x2A	; 42
    1a78:	50 e4       	ldi	r21, 0x40	; 64
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	89 8b       	std	Y+17, r24	; 0x11
    1a84:	9a 8b       	std	Y+18, r25	; 0x12
    1a86:	ab 8b       	std	Y+19, r26	; 0x13
    1a88:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a8a:	69 89       	ldd	r22, Y+17	; 0x11
    1a8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a90:	9c 89       	ldd	r25, Y+20	; 0x14
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	1c f4       	brge	.+6      	; 0x1aa8 <Trigger+0x156>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	88 8b       	std	Y+16, r24	; 0x10
    1aa6:	91 c0       	rjmp	.+290    	; 0x1bca <Trigger+0x278>
	else if (__tmp > 255)
    1aa8:	69 89       	ldd	r22, Y+17	; 0x11
    1aaa:	7a 89       	ldd	r23, Y+18	; 0x12
    1aac:	8b 89       	ldd	r24, Y+19	; 0x13
    1aae:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	53 e4       	ldi	r21, 0x43	; 67
    1ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	0c f0       	brlt	.+2      	; 0x1ac2 <Trigger+0x170>
    1ac0:	7b c0       	rjmp	.+246    	; 0x1bb8 <Trigger+0x266>
	{
		_delay_ms(__us / 1000.0);
    1ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a e7       	ldi	r20, 0x7A	; 122
    1ad0:	54 e4       	ldi	r21, 0x44	; 68
    1ad2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8c 87       	std	Y+12, r24	; 0x0c
    1adc:	9d 87       	std	Y+13, r25	; 0x0d
    1ade:	ae 87       	std	Y+14, r26	; 0x0e
    1ae0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ae4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ae6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a ef       	ldi	r20, 0xFA	; 250
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	88 87       	std	Y+8, r24	; 0x08
    1afc:	99 87       	std	Y+9, r25	; 0x09
    1afe:	aa 87       	std	Y+10, r26	; 0x0a
    1b00:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b02:	68 85       	ldd	r22, Y+8	; 0x08
    1b04:	79 85       	ldd	r23, Y+9	; 0x09
    1b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <Trigger+0x1d2>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9f 83       	std	Y+7, r25	; 0x07
    1b20:	8e 83       	std	Y+6, r24	; 0x06
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <Trigger+0x250>
	else if (__tmp > 65535)
    1b24:	68 85       	ldd	r22, Y+8	; 0x08
    1b26:	79 85       	ldd	r23, Y+9	; 0x09
    1b28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <Trigger+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9f 83       	std	Y+7, r25	; 0x07
    1b62:	8e 83       	std	Y+6, r24	; 0x06
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <Trigger+0x232>
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9d 83       	std	Y+5, r25	; 0x05
    1b6c:	8c 83       	std	Y+4, r24	; 0x04
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <Trigger+0x220>
    1b76:	9d 83       	std	Y+5, r25	; 0x05
    1b78:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9f 83       	std	Y+7, r25	; 0x07
    1b82:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8e 81       	ldd	r24, Y+6	; 0x06
    1b86:	9f 81       	ldd	r25, Y+7	; 0x07
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <Trigger+0x214>
    1b8c:	24 c0       	rjmp	.+72     	; 0x1bd6 <Trigger+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	68 85       	ldd	r22, Y+8	; 0x08
    1b90:	79 85       	ldd	r23, Y+9	; 0x09
    1b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9f 83       	std	Y+7, r25	; 0x07
    1ba0:	8e 83       	std	Y+6, r24	; 0x06
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	9b 83       	std	Y+3, r25	; 0x03
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	9b 81       	ldd	r25, Y+3	; 0x03
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <Trigger+0x25c>
    1bb2:	9b 83       	std	Y+3, r25	; 0x03
    1bb4:	8a 83       	std	Y+2, r24	; 0x02
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <Trigger+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb8:	69 89       	ldd	r22, Y+17	; 0x11
    1bba:	7a 89       	ldd	r23, Y+18	; 0x12
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	88 8b       	std	Y+16, r24	; 0x10
    1bca:	88 89       	ldd	r24, Y+16	; 0x10
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	8a 95       	dec	r24
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <Trigger+0x27e>
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(20);
}
    1bd6:	a6 96       	adiw	r28, 0x26	; 38
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <LCD_init>:

void LCD_init()
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	DIO_init();
    1bf0:	0e 94 11 08 	call	0x1022	; 0x1022 <DIO_init>
	LCD_SendCMD(BIT4MODE);
    1bf4:	82 e3       	ldi	r24, 0x32	; 50
    1bf6:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
	LCD_SendCMD(CURSOR_BLINK_ON);
    1bfa:	8f e0       	ldi	r24, 0x0F	; 15
    1bfc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
	LCD_SendCMD(CURSOR_MOVE_RIGHT);
    1c00:	86 e0       	ldi	r24, 0x06	; 6
    1c02:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
	LCD_SendCMD(CLEAR_DISPLAY);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>

}
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_SendCMD>:
void LCD_SendCMD(unit8 cmd)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	69 97       	sbiw	r28, 0x19	; 25
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	89 8f       	std	Y+25, r24	; 0x19
	  DIO_Write(RS,LOW);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  DIO_Write(RW,LOW);
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,7) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    1c38:	89 8d       	ldd	r24, Y+25	; 0x19
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_SendCMD+0x36>
    1c3e:	87 e0       	ldi	r24, 0x07	; 7
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <LCD_SendCMD+0x3e>
    1c48:	87 e0       	ldi	r24, 0x07	; 7
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,6) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    1c50:	89 8d       	ldd	r24, Y+25	; 0x19
    1c52:	82 95       	swap	r24
    1c54:	86 95       	lsr	r24
    1c56:	86 95       	lsr	r24
    1c58:	83 70       	andi	r24, 0x03	; 3
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	81 70       	andi	r24, 0x01	; 1
    1c60:	90 70       	andi	r25, 0x00	; 0
    1c62:	88 23       	and	r24, r24
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <LCD_SendCMD+0x5e>
    1c66:	86 e0       	ldi	r24, 0x06	; 6
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <LCD_SendCMD+0x66>
    1c70:	86 e0       	ldi	r24, 0x06	; 6
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,5) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    1c78:	89 8d       	ldd	r24, Y+25	; 0x19
    1c7a:	82 95       	swap	r24
    1c7c:	86 95       	lsr	r24
    1c7e:	87 70       	andi	r24, 0x07	; 7
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	88 23       	and	r24, r24
    1c8a:	29 f0       	breq	.+10     	; 0x1c96 <LCD_SendCMD+0x84>
    1c8c:	85 e0       	ldi	r24, 0x05	; 5
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <LCD_SendCMD+0x8c>
    1c96:	85 e0       	ldi	r24, 0x05	; 5
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,4) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    1c9e:	89 8d       	ldd	r24, Y+25	; 0x19
    1ca0:	82 95       	swap	r24
    1ca2:	8f 70       	andi	r24, 0x0F	; 15
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	81 70       	andi	r24, 0x01	; 1
    1caa:	90 70       	andi	r25, 0x00	; 0
    1cac:	88 23       	and	r24, r24
    1cae:	29 f0       	breq	.+10     	; 0x1cba <LCD_SendCMD+0xa8>
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <LCD_SendCMD+0xb0>
    1cba:	84 e0       	ldi	r24, 0x04	; 4
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  Trigger();
    1cc2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Trigger>
	  GET_BIT(cmd,3) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    1cc6:	89 8d       	ldd	r24, Y+25	; 0x19
    1cc8:	86 95       	lsr	r24
    1cca:	86 95       	lsr	r24
    1ccc:	86 95       	lsr	r24
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	90 70       	andi	r25, 0x00	; 0
    1cd6:	88 23       	and	r24, r24
    1cd8:	29 f0       	breq	.+10     	; 0x1ce4 <LCD_SendCMD+0xd2>
    1cda:	87 e0       	ldi	r24, 0x07	; 7
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1ce2:	04 c0       	rjmp	.+8      	; 0x1cec <LCD_SendCMD+0xda>
    1ce4:	87 e0       	ldi	r24, 0x07	; 7
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,2) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    1cec:	89 8d       	ldd	r24, Y+25	; 0x19
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	81 70       	andi	r24, 0x01	; 1
    1cf8:	90 70       	andi	r25, 0x00	; 0
    1cfa:	88 23       	and	r24, r24
    1cfc:	29 f0       	breq	.+10     	; 0x1d08 <LCD_SendCMD+0xf6>
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <LCD_SendCMD+0xfe>
    1d08:	86 e0       	ldi	r24, 0x06	; 6
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,1) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    1d10:	89 8d       	ldd	r24, Y+25	; 0x19
    1d12:	86 95       	lsr	r24
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	81 70       	andi	r24, 0x01	; 1
    1d1a:	90 70       	andi	r25, 0x00	; 0
    1d1c:	88 23       	and	r24, r24
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <LCD_SendCMD+0x118>
    1d20:	85 e0       	ldi	r24, 0x05	; 5
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1d28:	04 c0       	rjmp	.+8      	; 0x1d32 <LCD_SendCMD+0x120>
    1d2a:	85 e0       	ldi	r24, 0x05	; 5
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(cmd,0) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    1d32:	89 8d       	ldd	r24, Y+25	; 0x19
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	90 70       	andi	r25, 0x00	; 0
    1d3c:	88 23       	and	r24, r24
    1d3e:	29 f0       	breq	.+10     	; 0x1d4a <LCD_SendCMD+0x138>
    1d40:	84 e0       	ldi	r24, 0x04	; 4
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <LCD_SendCMD+0x140>
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  Trigger();
    1d52:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Trigger>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 ea       	ldi	r26, 0xA0	; 160
    1d5c:	b1 e4       	ldi	r27, 0x41	; 65
    1d5e:	8d 8b       	std	Y+21, r24	; 0x15
    1d60:	9e 8b       	std	Y+22, r25	; 0x16
    1d62:	af 8b       	std	Y+23, r26	; 0x17
    1d64:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d66:	6d 89       	ldd	r22, Y+21	; 0x15
    1d68:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6e:	2b ea       	ldi	r18, 0xAB	; 171
    1d70:	3a ea       	ldi	r19, 0xAA	; 170
    1d72:	4a e2       	ldi	r20, 0x2A	; 42
    1d74:	50 e4       	ldi	r21, 0x40	; 64
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
    1d80:	9a 8b       	std	Y+18, r25	; 0x12
    1d82:	ab 8b       	std	Y+19, r26	; 0x13
    1d84:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d86:	69 89       	ldd	r22, Y+17	; 0x11
    1d88:	7a 89       	ldd	r23, Y+18	; 0x12
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	1c f4       	brge	.+6      	; 0x1da4 <LCD_SendCMD+0x192>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	88 8b       	std	Y+16, r24	; 0x10
    1da2:	91 c0       	rjmp	.+290    	; 0x1ec6 <LCD_SendCMD+0x2b4>
	else if (__tmp > 255)
    1da4:	69 89       	ldd	r22, Y+17	; 0x11
    1da6:	7a 89       	ldd	r23, Y+18	; 0x12
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	53 e4       	ldi	r21, 0x43	; 67
    1db4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <LCD_SendCMD+0x1ac>
    1dbc:	7b c0       	rjmp	.+246    	; 0x1eb4 <LCD_SendCMD+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a e7       	ldi	r20, 0x7A	; 122
    1dcc:	54 e4       	ldi	r21, 0x44	; 68
    1dce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8c 87       	std	Y+12, r24	; 0x0c
    1dd8:	9d 87       	std	Y+13, r25	; 0x0d
    1dda:	ae 87       	std	Y+14, r26	; 0x0e
    1ddc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	6c 85       	ldd	r22, Y+12	; 0x0c
    1de0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1de2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a ef       	ldi	r20, 0xFA	; 250
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	88 87       	std	Y+8, r24	; 0x08
    1df8:	99 87       	std	Y+9, r25	; 0x09
    1dfa:	aa 87       	std	Y+10, r26	; 0x0a
    1dfc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dfe:	68 85       	ldd	r22, Y+8	; 0x08
    1e00:	79 85       	ldd	r23, Y+9	; 0x09
    1e02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <LCD_SendCMD+0x20e>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9f 83       	std	Y+7, r25	; 0x07
    1e1c:	8e 83       	std	Y+6, r24	; 0x06
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <LCD_SendCMD+0x28c>
	else if (__tmp > 65535)
    1e20:	68 85       	ldd	r22, Y+8	; 0x08
    1e22:	79 85       	ldd	r23, Y+9	; 0x09
    1e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <LCD_SendCMD+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9f 83       	std	Y+7, r25	; 0x07
    1e5e:	8e 83       	std	Y+6, r24	; 0x06
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_SendCMD+0x26e>
    1e62:	88 ec       	ldi	r24, 0xC8	; 200
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9d 83       	std	Y+5, r25	; 0x05
    1e68:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_SendCMD+0x25c>
    1e72:	9d 83       	std	Y+5, r25	; 0x05
    1e74:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	8e 81       	ldd	r24, Y+6	; 0x06
    1e78:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9f 83       	std	Y+7, r25	; 0x07
    1e7e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	8e 81       	ldd	r24, Y+6	; 0x06
    1e82:	9f 81       	ldd	r25, Y+7	; 0x07
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <LCD_SendCMD+0x250>
    1e88:	24 c0       	rjmp	.+72     	; 0x1ed2 <LCD_SendCMD+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	68 85       	ldd	r22, Y+8	; 0x08
    1e8c:	79 85       	ldd	r23, Y+9	; 0x09
    1e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9f 83       	std	Y+7, r25	; 0x07
    1e9c:	8e 83       	std	Y+6, r24	; 0x06
    1e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea2:	9b 83       	std	Y+3, r25	; 0x03
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_SendCMD+0x298>
    1eae:	9b 83       	std	Y+3, r25	; 0x03
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <LCD_SendCMD+0x2c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eb4:	69 89       	ldd	r22, Y+17	; 0x11
    1eb6:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eba:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	88 8b       	std	Y+16, r24	; 0x10
    1ec6:	88 89       	ldd	r24, Y+16	; 0x10
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	8a 95       	dec	r24
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_SendCMD+0x2ba>
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(20);
}
    1ed2:	69 96       	adiw	r28, 0x19	; 25
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <LCD_SendData>:
void LCD_SendData(unit8 data)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	69 97       	sbiw	r28, 0x19	; 25
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	89 8f       	std	Y+25, r24	; 0x19
	  DIO_Write(RS,HIGH);
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	61 e0       	ldi	r22, 0x01	; 1
    1efe:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  DIO_Write(RW,LOW);
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,7) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    1f0a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <LCD_SendData+0x36>
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <LCD_SendData+0x3e>
    1f1a:	87 e0       	ldi	r24, 0x07	; 7
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,6) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    1f22:	89 8d       	ldd	r24, Y+25	; 0x19
    1f24:	82 95       	swap	r24
    1f26:	86 95       	lsr	r24
    1f28:	86 95       	lsr	r24
    1f2a:	83 70       	andi	r24, 0x03	; 3
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	81 70       	andi	r24, 0x01	; 1
    1f32:	90 70       	andi	r25, 0x00	; 0
    1f34:	88 23       	and	r24, r24
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <LCD_SendData+0x5e>
    1f38:	86 e0       	ldi	r24, 0x06	; 6
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <LCD_SendData+0x66>
    1f42:	86 e0       	ldi	r24, 0x06	; 6
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,5) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    1f4a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f4c:	82 95       	swap	r24
    1f4e:	86 95       	lsr	r24
    1f50:	87 70       	andi	r24, 0x07	; 7
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	88 23       	and	r24, r24
    1f5c:	29 f0       	breq	.+10     	; 0x1f68 <LCD_SendData+0x84>
    1f5e:	85 e0       	ldi	r24, 0x05	; 5
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1f66:	04 c0       	rjmp	.+8      	; 0x1f70 <LCD_SendData+0x8c>
    1f68:	85 e0       	ldi	r24, 0x05	; 5
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,4) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    1f70:	89 8d       	ldd	r24, Y+25	; 0x19
    1f72:	82 95       	swap	r24
    1f74:	8f 70       	andi	r24, 0x0F	; 15
    1f76:	88 2f       	mov	r24, r24
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	81 70       	andi	r24, 0x01	; 1
    1f7c:	90 70       	andi	r25, 0x00	; 0
    1f7e:	88 23       	and	r24, r24
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <LCD_SendData+0xa8>
    1f82:	84 e0       	ldi	r24, 0x04	; 4
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1f8a:	04 c0       	rjmp	.+8      	; 0x1f94 <LCD_SendData+0xb0>
    1f8c:	84 e0       	ldi	r24, 0x04	; 4
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  Trigger();
    1f94:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Trigger>
	  GET_BIT(data,3) ? DIO_Write(D7,HIGH) : DIO_Write(D7,LOW);
    1f98:	89 8d       	ldd	r24, Y+25	; 0x19
    1f9a:	86 95       	lsr	r24
    1f9c:	86 95       	lsr	r24
    1f9e:	86 95       	lsr	r24
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	81 70       	andi	r24, 0x01	; 1
    1fa6:	90 70       	andi	r25, 0x00	; 0
    1fa8:	88 23       	and	r24, r24
    1faa:	29 f0       	breq	.+10     	; 0x1fb6 <LCD_SendData+0xd2>
    1fac:	87 e0       	ldi	r24, 0x07	; 7
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1fb4:	04 c0       	rjmp	.+8      	; 0x1fbe <LCD_SendData+0xda>
    1fb6:	87 e0       	ldi	r24, 0x07	; 7
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,2) ? DIO_Write(D6,HIGH) : DIO_Write(D6,LOW);
    1fbe:	89 8d       	ldd	r24, Y+25	; 0x19
    1fc0:	86 95       	lsr	r24
    1fc2:	86 95       	lsr	r24
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	81 70       	andi	r24, 0x01	; 1
    1fca:	90 70       	andi	r25, 0x00	; 0
    1fcc:	88 23       	and	r24, r24
    1fce:	29 f0       	breq	.+10     	; 0x1fda <LCD_SendData+0xf6>
    1fd0:	86 e0       	ldi	r24, 0x06	; 6
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1fd8:	04 c0       	rjmp	.+8      	; 0x1fe2 <LCD_SendData+0xfe>
    1fda:	86 e0       	ldi	r24, 0x06	; 6
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,1) ? DIO_Write(D5,HIGH) : DIO_Write(D5,LOW);
    1fe2:	89 8d       	ldd	r24, Y+25	; 0x19
    1fe4:	86 95       	lsr	r24
    1fe6:	88 2f       	mov	r24, r24
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	81 70       	andi	r24, 0x01	; 1
    1fec:	90 70       	andi	r25, 0x00	; 0
    1fee:	88 23       	and	r24, r24
    1ff0:	29 f0       	breq	.+10     	; 0x1ffc <LCD_SendData+0x118>
    1ff2:	85 e0       	ldi	r24, 0x05	; 5
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <LCD_SendData+0x120>
    1ffc:	85 e0       	ldi	r24, 0x05	; 5
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  GET_BIT(data,0) ? DIO_Write(D4,HIGH) : DIO_Write(D4,LOW);
    2004:	89 8d       	ldd	r24, Y+25	; 0x19
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	81 70       	andi	r24, 0x01	; 1
    200c:	90 70       	andi	r25, 0x00	; 0
    200e:	88 23       	and	r24, r24
    2010:	29 f0       	breq	.+10     	; 0x201c <LCD_SendData+0x138>
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    201a:	04 c0       	rjmp	.+8      	; 0x2024 <LCD_SendData+0x140>
    201c:	84 e0       	ldi	r24, 0x04	; 4
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
	  Trigger();
    2024:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Trigger>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 ea       	ldi	r26, 0xA0	; 160
    202e:	b1 e4       	ldi	r27, 0x41	; 65
    2030:	8d 8b       	std	Y+21, r24	; 0x15
    2032:	9e 8b       	std	Y+22, r25	; 0x16
    2034:	af 8b       	std	Y+23, r26	; 0x17
    2036:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2038:	6d 89       	ldd	r22, Y+21	; 0x15
    203a:	7e 89       	ldd	r23, Y+22	; 0x16
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	2b ea       	ldi	r18, 0xAB	; 171
    2042:	3a ea       	ldi	r19, 0xAA	; 170
    2044:	4a e2       	ldi	r20, 0x2A	; 42
    2046:	50 e4       	ldi	r21, 0x40	; 64
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	89 8b       	std	Y+17, r24	; 0x11
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	ab 8b       	std	Y+19, r26	; 0x13
    2056:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2058:	69 89       	ldd	r22, Y+17	; 0x11
    205a:	7a 89       	ldd	r23, Y+18	; 0x12
    205c:	8b 89       	ldd	r24, Y+19	; 0x13
    205e:	9c 89       	ldd	r25, Y+20	; 0x14
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	1c f4       	brge	.+6      	; 0x2076 <LCD_SendData+0x192>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	88 8b       	std	Y+16, r24	; 0x10
    2074:	91 c0       	rjmp	.+290    	; 0x2198 <LCD_SendData+0x2b4>
	else if (__tmp > 255)
    2076:	69 89       	ldd	r22, Y+17	; 0x11
    2078:	7a 89       	ldd	r23, Y+18	; 0x12
    207a:	8b 89       	ldd	r24, Y+19	; 0x13
    207c:	9c 89       	ldd	r25, Y+20	; 0x14
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	53 e4       	ldi	r21, 0x43	; 67
    2086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	0c f0       	brlt	.+2      	; 0x2090 <LCD_SendData+0x1ac>
    208e:	7b c0       	rjmp	.+246    	; 0x2186 <LCD_SendData+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    2090:	6d 89       	ldd	r22, Y+21	; 0x15
    2092:	7e 89       	ldd	r23, Y+22	; 0x16
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8c 87       	std	Y+12, r24	; 0x0c
    20aa:	9d 87       	std	Y+13, r25	; 0x0d
    20ac:	ae 87       	std	Y+14, r26	; 0x0e
    20ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    20b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    20b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a ef       	ldi	r20, 0xFA	; 250
    20be:	54 e4       	ldi	r21, 0x44	; 68
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	88 87       	std	Y+8, r24	; 0x08
    20ca:	99 87       	std	Y+9, r25	; 0x09
    20cc:	aa 87       	std	Y+10, r26	; 0x0a
    20ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20d0:	68 85       	ldd	r22, Y+8	; 0x08
    20d2:	79 85       	ldd	r23, Y+9	; 0x09
    20d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_SendData+0x20e>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9f 83       	std	Y+7, r25	; 0x07
    20ee:	8e 83       	std	Y+6, r24	; 0x06
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <LCD_SendData+0x28c>
	else if (__tmp > 65535)
    20f2:	68 85       	ldd	r22, Y+8	; 0x08
    20f4:	79 85       	ldd	r23, Y+9	; 0x09
    20f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	4c f5       	brge	.+82     	; 0x215c <LCD_SendData+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	6c 85       	ldd	r22, Y+12	; 0x0c
    210c:	7d 85       	ldd	r23, Y+13	; 0x0d
    210e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2110:	9f 85       	ldd	r25, Y+15	; 0x0f
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9f 83       	std	Y+7, r25	; 0x07
    2130:	8e 83       	std	Y+6, r24	; 0x06
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <LCD_SendData+0x26e>
    2134:	88 ec       	ldi	r24, 0xC8	; 200
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9d 83       	std	Y+5, r25	; 0x05
    213a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	9d 81       	ldd	r25, Y+5	; 0x05
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_SendData+0x25c>
    2144:	9d 83       	std	Y+5, r25	; 0x05
    2146:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	8e 81       	ldd	r24, Y+6	; 0x06
    214a:	9f 81       	ldd	r25, Y+7	; 0x07
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	9f 83       	std	Y+7, r25	; 0x07
    2150:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	9f 81       	ldd	r25, Y+7	; 0x07
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	69 f7       	brne	.-38     	; 0x2134 <LCD_SendData+0x250>
    215a:	24 c0       	rjmp	.+72     	; 0x21a4 <LCD_SendData+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	68 85       	ldd	r22, Y+8	; 0x08
    215e:	79 85       	ldd	r23, Y+9	; 0x09
    2160:	8a 85       	ldd	r24, Y+10	; 0x0a
    2162:	9b 85       	ldd	r25, Y+11	; 0x0b
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9f 83       	std	Y+7, r25	; 0x07
    216e:	8e 83       	std	Y+6, r24	; 0x06
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	9b 83       	std	Y+3, r25	; 0x03
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	9b 81       	ldd	r25, Y+3	; 0x03
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_SendData+0x298>
    2180:	9b 83       	std	Y+3, r25	; 0x03
    2182:	8a 83       	std	Y+2, r24	; 0x02
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <LCD_SendData+0x2c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2186:	69 89       	ldd	r22, Y+17	; 0x11
    2188:	7a 89       	ldd	r23, Y+18	; 0x12
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	88 8b       	std	Y+16, r24	; 0x10
    2198:	88 89       	ldd	r24, Y+16	; 0x10
    219a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	8a 95       	dec	r24
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_SendData+0x2ba>
    21a2:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(20);
}
    21a4:	69 96       	adiw	r28, 0x19	; 25
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <LCD_SendString>:

void LCD_SendString(unit8* data)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <LCD_SendString+0x6>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	0a c0       	rjmp	.+20     	; 0x21da <LCD_SendString+0x24>
	for(;*data!='\0';data++) LCD_SendData(*data);
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	80 81       	ld	r24, Z
    21cc:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	e9 81       	ldd	r30, Y+1	; 0x01
    21dc:	fa 81       	ldd	r31, Y+2	; 0x02
    21de:	80 81       	ld	r24, Z
    21e0:	88 23       	and	r24, r24
    21e2:	89 f7       	brne	.-30     	; 0x21c6 <LCD_SendString+0x10>
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_SendStringxy>:
void LCD_SendStringxy(unit8* data,unit8 x,unit8 y)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <LCD_SendStringxy+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <LCD_SendStringxy+0x8>
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <LCD_SendStringxy+0xa>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	6d 83       	std	Y+5, r22	; 0x05
    2202:	4e 83       	std	Y+6, r20	; 0x06
	LCD_SendCMD(0x02);
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
	LCD_SendCMD(0x2c);
    220a:	8c e2       	ldi	r24, 0x2C	; 44
    220c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
	for(int i=0;i<cal(x,y);i++) LCD_SendCMD(0x14);
    2210:	1a 82       	std	Y+2, r1	; 0x02
    2212:	19 82       	std	Y+1, r1	; 0x01
    2214:	08 c0       	rjmp	.+16     	; 0x2226 <LCD_SendStringxy+0x38>
    2216:	84 e1       	ldi	r24, 0x14	; 20
    2218:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	8e 81       	ldd	r24, Y+6	; 0x06
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	00 24       	eor	r0, r0
    2234:	96 95       	lsr	r25
    2236:	87 95       	ror	r24
    2238:	07 94       	ror	r0
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	07 94       	ror	r0
    2240:	98 2f       	mov	r25, r24
    2242:	80 2d       	mov	r24, r0
    2244:	28 0f       	add	r18, r24
    2246:	39 1f       	adc	r19, r25
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	82 17       	cp	r24, r18
    224e:	93 07       	cpc	r25, r19
    2250:	14 f3       	brlt	.-60     	; 0x2216 <LCD_SendStringxy+0x28>
	LCD_SendString(data);
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_SendString>

}
    225a:	26 96       	adiw	r28, 0x06	; 6
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <COL_Check>:
		{'1','2','3','-'},
		{'C','0','=','+'}
};

static unit8 COL_Check()
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	0f 92       	push	r0
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
	unit8 checker = NO_KEY ;
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	89 83       	std	Y+1, r24	; 0x01
	if(!DIO_Read(C0)) checker = 0;
    227a:	84 e1       	ldi	r24, 0x14	; 20
    227c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_Read>
    2280:	88 23       	and	r24, r24
    2282:	11 f4       	brne	.+4      	; 0x2288 <COL_Check+0x1c>
    2284:	19 82       	std	Y+1, r1	; 0x01
    2286:	17 c0       	rjmp	.+46     	; 0x22b6 <COL_Check+0x4a>
	else if (!DIO_Read(C1)) checker = 1;
    2288:	85 e1       	ldi	r24, 0x15	; 21
    228a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_Read>
    228e:	88 23       	and	r24, r24
    2290:	19 f4       	brne	.+6      	; 0x2298 <COL_Check+0x2c>
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <COL_Check+0x4a>
	else if (!DIO_Read(C2)) checker = 2;
    2298:	86 e1       	ldi	r24, 0x16	; 22
    229a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_Read>
    229e:	88 23       	and	r24, r24
    22a0:	19 f4       	brne	.+6      	; 0x22a8 <COL_Check+0x3c>
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <COL_Check+0x4a>
	else if (!DIO_Read(C3)) checker = 3;
    22a8:	87 e1       	ldi	r24, 0x17	; 23
    22aa:	0e 94 65 0b 	call	0x16ca	; 0x16ca <DIO_Read>
    22ae:	88 23       	and	r24, r24
    22b0:	11 f4       	brne	.+4      	; 0x22b6 <COL_Check+0x4a>
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	89 83       	std	Y+1, r24	; 0x01
	return checker;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <Keypad_Read>:

unit8 Keypad_Read()
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <Keypad_Read+0x6>
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
   unit8 key = NO_KEY;
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	8a 83       	std	Y+2, r24	; 0x02
   unit8 value = NO_KEY ;
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	89 83       	std	Y+1, r24	; 0x01

   DIO_Write(R0,LOW);
    22d2:	80 e1       	ldi	r24, 0x10	; 16
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R1,HIGH);
    22da:	81 e1       	ldi	r24, 0x11	; 17
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R2,HIGH);
    22e2:	82 e1       	ldi	r24, 0x12	; 18
    22e4:	61 e0       	ldi	r22, 0x01	; 1
    22e6:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R3,HIGH);
    22ea:	83 e1       	ldi	r24, 0x13	; 19
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   key = COL_Check();
    22f2:	0e 94 36 11 	call	0x226c	; 0x226c <COL_Check>
    22f6:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	8f 3f       	cpi	r24, 0xFF	; 255
    22fc:	41 f0       	breq	.+16     	; 0x230e <Keypad_Read+0x4e>
	   value = KeysTable[0][key];
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	fc 01       	movw	r30, r24
    2306:	ed 5e       	subi	r30, 0xED	; 237
    2308:	fd 4f       	sbci	r31, 0xFD	; 253
    230a:	80 81       	ld	r24, Z
    230c:	89 83       	std	Y+1, r24	; 0x01
   }

   DIO_Write(R0,HIGH);
    230e:	80 e1       	ldi	r24, 0x10	; 16
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R1,LOW);
    2316:	81 e1       	ldi	r24, 0x11	; 17
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R2,HIGH);
    231e:	82 e1       	ldi	r24, 0x12	; 18
    2320:	61 e0       	ldi	r22, 0x01	; 1
    2322:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R3,HIGH);
    2326:	83 e1       	ldi	r24, 0x13	; 19
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   key = COL_Check();
    232e:	0e 94 36 11 	call	0x226c	; 0x226c <COL_Check>
    2332:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	8f 3f       	cpi	r24, 0xFF	; 255
    2338:	41 f0       	breq	.+16     	; 0x234a <Keypad_Read+0x8a>
	   value = KeysTable[1][key];
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	fc 01       	movw	r30, r24
    2342:	e9 5e       	subi	r30, 0xE9	; 233
    2344:	fd 4f       	sbci	r31, 0xFD	; 253
    2346:	80 81       	ld	r24, Z
    2348:	89 83       	std	Y+1, r24	; 0x01
   }

   DIO_Write(R0,HIGH);
    234a:	80 e1       	ldi	r24, 0x10	; 16
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R1,HIGH);
    2352:	81 e1       	ldi	r24, 0x11	; 17
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R2,LOW);
    235a:	82 e1       	ldi	r24, 0x12	; 18
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R3,HIGH);
    2362:	83 e1       	ldi	r24, 0x13	; 19
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   key = COL_Check();
    236a:	0e 94 36 11 	call	0x226c	; 0x226c <COL_Check>
    236e:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	8f 3f       	cpi	r24, 0xFF	; 255
    2374:	41 f0       	breq	.+16     	; 0x2386 <Keypad_Read+0xc6>
	   value = KeysTable[2][key];
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	fc 01       	movw	r30, r24
    237e:	e5 5e       	subi	r30, 0xE5	; 229
    2380:	fd 4f       	sbci	r31, 0xFD	; 253
    2382:	80 81       	ld	r24, Z
    2384:	89 83       	std	Y+1, r24	; 0x01
   }

   DIO_Write(R0,HIGH);
    2386:	80 e1       	ldi	r24, 0x10	; 16
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R1,HIGH);
    238e:	81 e1       	ldi	r24, 0x11	; 17
    2390:	61 e0       	ldi	r22, 0x01	; 1
    2392:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R2,HIGH);
    2396:	82 e1       	ldi	r24, 0x12	; 18
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   DIO_Write(R3,LOW);
    239e:	83 e1       	ldi	r24, 0x13	; 19
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
   key = COL_Check();
    23a6:	0e 94 36 11 	call	0x226c	; 0x226c <COL_Check>
    23aa:	8a 83       	std	Y+2, r24	; 0x02
   if(key != NO_KEY){
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	8f 3f       	cpi	r24, 0xFF	; 255
    23b0:	41 f0       	breq	.+16     	; 0x23c2 <Keypad_Read+0x102>
	   value = KeysTable[3][key];
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	fc 01       	movw	r30, r24
    23ba:	e1 5e       	subi	r30, 0xE1	; 225
    23bc:	fd 4f       	sbci	r31, 0xFD	; 253
    23be:	80 81       	ld	r24, Z
    23c0:	89 83       	std	Y+1, r24	; 0x01
   }

   return value;
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <Toggle>:

unit8 flag = 0;


void Toggle()
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	TOG_BIT(flag, 0);
    23d6:	90 91 2a 02 	lds	r25, 0x022A
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	89 27       	eor	r24, r25
    23de:	80 93 2a 02 	sts	0x022A, r24
	DIO_Write(PORTD_1,flag);
    23e2:	90 91 2a 02 	lds	r25, 0x022A
    23e6:	89 e1       	ldi	r24, 0x19	; 25
    23e8:	69 2f       	mov	r22, r25
    23ea:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <main>:

unit8 button = NO_KEY;

int main()
{
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	cf 58       	subi	r28, 0x8F	; 143
    2402:	d0 40       	sbci	r29, 0x00	; 0
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61


	Interrupt_Enable();
    240e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Interrupt_Enable>
	SetCallbackFunction_INT0(Toggle);
    2412:	87 ee       	ldi	r24, 0xE7	; 231
    2414:	91 e1       	ldi	r25, 0x11	; 17
    2416:	0e 94 42 07 	call	0xe84	; 0xe84 <SetCallbackFunction_INT0>

	// Definition of Important Variables
	char PasswordCorrect[] = Password;
    241a:	ce 01       	movw	r24, r28
    241c:	81 58       	subi	r24, 0x81	; 129
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	c5 57       	subi	r28, 0x75	; 117
    2422:	df 4f       	sbci	r29, 0xFF	; 255
    2424:	99 83       	std	Y+1, r25	; 0x01
    2426:	88 83       	st	Y, r24
    2428:	cb 58       	subi	r28, 0x8B	; 139
    242a:	d0 40       	sbci	r29, 0x00	; 0
    242c:	2e eb       	ldi	r18, 0xBE	; 190
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	c3 57       	subi	r28, 0x73	; 115
    2432:	df 4f       	sbci	r29, 0xFF	; 255
    2434:	39 83       	std	Y+1, r19	; 0x01
    2436:	28 83       	st	Y, r18
    2438:	cd 58       	subi	r28, 0x8D	; 141
    243a:	d0 40       	sbci	r29, 0x00	; 0
    243c:	35 e0       	ldi	r19, 0x05	; 5
    243e:	c1 57       	subi	r28, 0x71	; 113
    2440:	df 4f       	sbci	r29, 0xFF	; 255
    2442:	38 83       	st	Y, r19
    2444:	cf 58       	subi	r28, 0x8F	; 143
    2446:	d0 40       	sbci	r29, 0x00	; 0
    2448:	c3 57       	subi	r28, 0x73	; 115
    244a:	df 4f       	sbci	r29, 0xFF	; 255
    244c:	e8 81       	ld	r30, Y
    244e:	f9 81       	ldd	r31, Y+1	; 0x01
    2450:	cd 58       	subi	r28, 0x8D	; 141
    2452:	d0 40       	sbci	r29, 0x00	; 0
    2454:	00 80       	ld	r0, Z
    2456:	c3 57       	subi	r28, 0x73	; 115
    2458:	df 4f       	sbci	r29, 0xFF	; 255
    245a:	28 81       	ld	r18, Y
    245c:	39 81       	ldd	r19, Y+1	; 0x01
    245e:	cd 58       	subi	r28, 0x8D	; 141
    2460:	d0 40       	sbci	r29, 0x00	; 0
    2462:	2f 5f       	subi	r18, 0xFF	; 255
    2464:	3f 4f       	sbci	r19, 0xFF	; 255
    2466:	c3 57       	subi	r28, 0x73	; 115
    2468:	df 4f       	sbci	r29, 0xFF	; 255
    246a:	39 83       	std	Y+1, r19	; 0x01
    246c:	28 83       	st	Y, r18
    246e:	cd 58       	subi	r28, 0x8D	; 141
    2470:	d0 40       	sbci	r29, 0x00	; 0
    2472:	c5 57       	subi	r28, 0x75	; 117
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	e8 81       	ld	r30, Y
    2478:	f9 81       	ldd	r31, Y+1	; 0x01
    247a:	cb 58       	subi	r28, 0x8B	; 139
    247c:	d0 40       	sbci	r29, 0x00	; 0
    247e:	00 82       	st	Z, r0
    2480:	c5 57       	subi	r28, 0x75	; 117
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	28 81       	ld	r18, Y
    2486:	39 81       	ldd	r19, Y+1	; 0x01
    2488:	cb 58       	subi	r28, 0x8B	; 139
    248a:	d0 40       	sbci	r29, 0x00	; 0
    248c:	2f 5f       	subi	r18, 0xFF	; 255
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
    2490:	c5 57       	subi	r28, 0x75	; 117
    2492:	df 4f       	sbci	r29, 0xFF	; 255
    2494:	39 83       	std	Y+1, r19	; 0x01
    2496:	28 83       	st	Y, r18
    2498:	cb 58       	subi	r28, 0x8B	; 139
    249a:	d0 40       	sbci	r29, 0x00	; 0
    249c:	c1 57       	subi	r28, 0x71	; 113
    249e:	df 4f       	sbci	r29, 0xFF	; 255
    24a0:	38 81       	ld	r19, Y
    24a2:	cf 58       	subi	r28, 0x8F	; 143
    24a4:	d0 40       	sbci	r29, 0x00	; 0
    24a6:	31 50       	subi	r19, 0x01	; 1
    24a8:	c1 57       	subi	r28, 0x71	; 113
    24aa:	df 4f       	sbci	r29, 0xFF	; 255
    24ac:	38 83       	st	Y, r19
    24ae:	cf 58       	subi	r28, 0x8F	; 143
    24b0:	d0 40       	sbci	r29, 0x00	; 0
    24b2:	c1 57       	subi	r28, 0x71	; 113
    24b4:	df 4f       	sbci	r29, 0xFF	; 255
    24b6:	88 81       	ld	r24, Y
    24b8:	cf 58       	subi	r28, 0x8F	; 143
    24ba:	d0 40       	sbci	r29, 0x00	; 0
    24bc:	88 23       	and	r24, r24
    24be:	21 f6       	brne	.-120    	; 0x2448 <main+0x54>
	char PaswordEnter [5];
	unit8 PWflag = 0;
    24c0:	fe 01       	movw	r30, r28
    24c2:	e2 58       	subi	r30, 0x82	; 130
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	10 82       	st	Z, r1
	float a = 0 , b = 0 ;
    24c8:	fe 01       	movw	r30, r28
    24ca:	e6 58       	subi	r30, 0x86	; 134
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e0       	ldi	r26, 0x00	; 0
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	80 83       	st	Z, r24
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	a2 83       	std	Z+2, r26	; 0x02
    24dc:	b3 83       	std	Z+3, r27	; 0x03
    24de:	fe 01       	movw	r30, r28
    24e0:	ea 58       	subi	r30, 0x8A	; 138
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e0       	ldi	r26, 0x00	; 0
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	80 83       	st	Z, r24
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	a2 83       	std	Z+2, r26	; 0x02
    24f2:	b3 83       	std	Z+3, r27	; 0x03
	int j = 0;
    24f4:	fe 01       	movw	r30, r28
    24f6:	ec 58       	subi	r30, 0x8C	; 140
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	11 82       	std	Z+1, r1	; 0x01
    24fc:	10 82       	st	Z, r1
	unit8 op = 0;
    24fe:	fe 01       	movw	r30, r28
    2500:	ed 58       	subi	r30, 0x8D	; 141
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	10 82       	st	Z, r1

	LCD_init();
    2506:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <LCD_init>
	while(1)
	{
		// Password Entry Section
		LCD_SendCMD(CLEAR_DISPLAY);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
		LCD_SendString("Welcome to CAL");
    2510:	80 e6       	ldi	r24, 0x60	; 96
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_SendString>
    2518:	fe 01       	movw	r30, r28
    251a:	e3 59       	subi	r30, 0x93	; 147
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	aa e7       	ldi	r26, 0x7A	; 122
    2524:	b4 e4       	ldi	r27, 0x44	; 68
    2526:	80 83       	st	Z, r24
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	a2 83       	std	Z+2, r26	; 0x02
    252c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	8e 01       	movw	r16, r28
    2530:	07 59       	subi	r16, 0x97	; 151
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	fe 01       	movw	r30, r28
    2536:	e3 59       	subi	r30, 0x93	; 147
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    255c:	fe 01       	movw	r30, r28
    255e:	e7 59       	subi	r30, 0x97	; 151
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	44 f4       	brge	.+16     	; 0x258a <main+0x196>
		__ticks = 1;
    257a:	fe 01       	movw	r30, r28
    257c:	e9 59       	subi	r30, 0x99	; 153
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
    2588:	64 c0       	rjmp	.+200    	; 0x2652 <main+0x25e>
	else if (__tmp > 65535)
    258a:	fe 01       	movw	r30, r28
    258c:	e7 59       	subi	r30, 0x97	; 151
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	4f e7       	ldi	r20, 0x7F	; 127
    259e:	57 e4       	ldi	r21, 0x47	; 71
    25a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a4:	18 16       	cp	r1, r24
    25a6:	0c f0       	brlt	.+2      	; 0x25aa <main+0x1b6>
    25a8:	43 c0       	rjmp	.+134    	; 0x2630 <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	fe 01       	movw	r30, r28
    25ac:	e3 59       	subi	r30, 0x93	; 147
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8e 01       	movw	r16, r28
    25ca:	09 59       	subi	r16, 0x99	; 153
    25cc:	1f 4f       	sbci	r17, 0xFF	; 255
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	f8 01       	movw	r30, r16
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	1f c0       	rjmp	.+62     	; 0x2620 <main+0x22c>
    25e2:	fe 01       	movw	r30, r28
    25e4:	eb 59       	subi	r30, 0x9B	; 155
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	88 ec       	ldi	r24, 0xC8	; 200
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25f0:	fe 01       	movw	r30, r28
    25f2:	eb 59       	subi	r30, 0x9B	; 155
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <main+0x206>
    25fe:	fe 01       	movw	r30, r28
    2600:	eb 59       	subi	r30, 0x9B	; 155
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	de 01       	movw	r26, r28
    260a:	a9 59       	subi	r26, 0x99	; 153
    260c:	bf 4f       	sbci	r27, 0xFF	; 255
    260e:	fe 01       	movw	r30, r28
    2610:	e9 59       	subi	r30, 0x99	; 153
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	9c 93       	st	X, r25
    261e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	fe 01       	movw	r30, r28
    2622:	e9 59       	subi	r30, 0x99	; 153
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	d1 f6       	brne	.-76     	; 0x25e2 <main+0x1ee>
    262e:	33 c2       	rjmp	.+1126   	; 0x2a96 <main+0x6a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	8e 01       	movw	r16, r28
    2632:	09 59       	subi	r16, 0x99	; 153
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	fe 01       	movw	r30, r28
    2638:	e7 59       	subi	r30, 0x97	; 151
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	f8 01       	movw	r30, r16
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	de 01       	movw	r26, r28
    2654:	ad 59       	subi	r26, 0x9D	; 157
    2656:	bf 4f       	sbci	r27, 0xFF	; 255
    2658:	fe 01       	movw	r30, r28
    265a:	e9 59       	subi	r30, 0x99	; 153
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	9c 93       	st	X, r25
    2666:	8e 93       	st	-X, r24
    2668:	fe 01       	movw	r30, r28
    266a:	ed 59       	subi	r30, 0x9D	; 157
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <main+0x27e>
    2676:	fe 01       	movw	r30, r28
    2678:	ed 59       	subi	r30, 0x9D	; 157
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	0a c2       	rjmp	.+1044   	; 0x2a96 <main+0x6a2>
		_delay_ms(1000);
		while(PWflag == 0)
    2682:	fe 01       	movw	r30, r28
    2684:	e1 5a       	subi	r30, 0xA1	; 161
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	aa ef       	ldi	r26, 0xFA	; 250
    268e:	b3 e4       	ldi	r27, 0x43	; 67
    2690:	80 83       	st	Z, r24
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	a2 83       	std	Z+2, r26	; 0x02
    2696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	8e 01       	movw	r16, r28
    269a:	05 5a       	subi	r16, 0xA5	; 165
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	e1 5a       	subi	r30, 0xA1	; 161
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a ef       	ldi	r20, 0xFA	; 250
    26b2:	54 e4       	ldi	r21, 0x44	; 68
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	80 83       	st	Z, r24
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	a2 83       	std	Z+2, r26	; 0x02
    26c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c6:	fe 01       	movw	r30, r28
    26c8:	e5 5a       	subi	r30, 0xA5	; 165
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e8       	ldi	r20, 0x80	; 128
    26da:	5f e3       	ldi	r21, 0x3F	; 63
    26dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e0:	88 23       	and	r24, r24
    26e2:	44 f4       	brge	.+16     	; 0x26f4 <main+0x300>
		__ticks = 1;
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 5a       	subi	r30, 0xA7	; 167
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	64 c0       	rjmp	.+200    	; 0x27bc <main+0x3c8>
	else if (__tmp > 65535)
    26f4:	fe 01       	movw	r30, r28
    26f6:	e5 5a       	subi	r30, 0xA5	; 165
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	0c f0       	brlt	.+2      	; 0x2714 <main+0x320>
    2712:	43 c0       	rjmp	.+134    	; 0x279a <main+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	fe 01       	movw	r30, r28
    2716:	e1 5a       	subi	r30, 0xA1	; 161
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e2       	ldi	r20, 0x20	; 32
    2728:	51 e4       	ldi	r21, 0x41	; 65
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8e 01       	movw	r16, r28
    2734:	07 5a       	subi	r16, 0xA7	; 167
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	f8 01       	movw	r30, r16
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
    274a:	1f c0       	rjmp	.+62     	; 0x278a <main+0x396>
    274c:	fe 01       	movw	r30, r28
    274e:	e9 5a       	subi	r30, 0xA9	; 169
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	88 ec       	ldi	r24, 0xC8	; 200
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	fe 01       	movw	r30, r28
    275c:	e9 5a       	subi	r30, 0xA9	; 169
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <main+0x370>
    2768:	fe 01       	movw	r30, r28
    276a:	e9 5a       	subi	r30, 0xA9	; 169
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2772:	de 01       	movw	r26, r28
    2774:	a7 5a       	subi	r26, 0xA7	; 167
    2776:	bf 4f       	sbci	r27, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	e7 5a       	subi	r30, 0xA7	; 167
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	11 96       	adiw	r26, 0x01	; 1
    2786:	9c 93       	st	X, r25
    2788:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278a:	fe 01       	movw	r30, r28
    278c:	e7 5a       	subi	r30, 0xA7	; 167
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	d1 f6       	brne	.-76     	; 0x274c <main+0x358>
    2798:	27 c0       	rjmp	.+78     	; 0x27e8 <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	8e 01       	movw	r16, r28
    279c:	07 5a       	subi	r16, 0xA7	; 167
    279e:	1f 4f       	sbci	r17, 0xFF	; 255
    27a0:	fe 01       	movw	r30, r28
    27a2:	e5 5a       	subi	r30, 0xA5	; 165
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	f8 01       	movw	r30, r16
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	de 01       	movw	r26, r28
    27be:	ab 5a       	subi	r26, 0xAB	; 171
    27c0:	bf 4f       	sbci	r27, 0xFF	; 255
    27c2:	fe 01       	movw	r30, r28
    27c4:	e7 5a       	subi	r30, 0xA7	; 167
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	8d 93       	st	X+, r24
    27ce:	9c 93       	st	X, r25
    27d0:	fe 01       	movw	r30, r28
    27d2:	eb 5a       	subi	r30, 0xAB	; 171
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <main+0x3e6>
    27de:	fe 01       	movw	r30, r28
    27e0:	eb 5a       	subi	r30, 0xAB	; 171
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
		{
			_delay_ms(500);
		LCD_SendCMD(CLEAR_DISPLAY);
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
		PWflag = 1;
    27ee:	fe 01       	movw	r30, r28
    27f0:	e2 58       	subi	r30, 0x82	; 130
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	80 83       	st	Z, r24
		LCD_SendString("Password : ");
    27f8:	8f e6       	ldi	r24, 0x6F	; 111
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_SendString>
		for(int i=0;i<4;i++)
    2800:	fe 01       	movw	r30, r28
    2802:	ef 58       	subi	r30, 0x8F	; 143
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	11 82       	std	Z+1, r1	; 0x01
    2808:	10 82       	st	Z, r1
    280a:	e8 c0       	rjmp	.+464    	; 0x29dc <main+0x5e8>
		{
			button = Keypad_Read();
    280c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Keypad_Read>
    2810:	80 93 23 02 	sts	0x0223, r24
			if(button != NO_KEY) {
    2814:	80 91 23 02 	lds	r24, 0x0223
    2818:	8f 3f       	cpi	r24, 0xFF	; 255
    281a:	99 f0       	breq	.+38     	; 0x2842 <main+0x44e>
				PaswordEnter[i] = button;
    281c:	fe 01       	movw	r30, r28
    281e:	ef 58       	subi	r30, 0x8F	; 143
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	20 81       	ld	r18, Z
    2824:	31 81       	ldd	r19, Z+1	; 0x01
    2826:	40 91 23 02 	lds	r20, 0x0223
    282a:	ce 01       	movw	r24, r28
    282c:	8c 57       	subi	r24, 0x7C	; 124
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	fc 01       	movw	r30, r24
    2832:	e2 0f       	add	r30, r18
    2834:	f3 1f       	adc	r31, r19
    2836:	40 83       	st	Z, r20
				LCD_SendData(button);
    2838:	80 91 23 02 	lds	r24, 0x0223
    283c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    2840:	0b c0       	rjmp	.+22     	; 0x2858 <main+0x464>
			}
			else i--;
    2842:	de 01       	movw	r26, r28
    2844:	af 58       	subi	r26, 0x8F	; 143
    2846:	bf 4f       	sbci	r27, 0xFF	; 255
    2848:	fe 01       	movw	r30, r28
    284a:	ef 58       	subi	r30, 0x8F	; 143
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	8d 93       	st	X+, r24
    2856:	9c 93       	st	X, r25
			button = NO_KEY;
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	80 93 23 02 	sts	0x0223, r24
    285e:	fe 01       	movw	r30, r28
    2860:	ef 5a       	subi	r30, 0xAF	; 175
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a8 e4       	ldi	r26, 0x48	; 72
    286a:	b3 e4       	ldi	r27, 0x43	; 67
    286c:	80 83       	st	Z, r24
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	a2 83       	std	Z+2, r26	; 0x02
    2872:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	8e 01       	movw	r16, r28
    2876:	03 5b       	subi	r16, 0xB3	; 179
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	ef 5a       	subi	r30, 0xAF	; 175
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a ef       	ldi	r20, 0xFA	; 250
    288e:	54 e4       	ldi	r21, 0x44	; 68
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	f8 01       	movw	r30, r16
    289a:	80 83       	st	Z, r24
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	a2 83       	std	Z+2, r26	; 0x02
    28a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 5b       	subi	r30, 0xB3	; 179
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	44 f4       	brge	.+16     	; 0x28d0 <main+0x4dc>
		__ticks = 1;
    28c0:	fe 01       	movw	r30, r28
    28c2:	e5 5b       	subi	r30, 0xB5	; 181
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	64 c0       	rjmp	.+200    	; 0x2998 <main+0x5a4>
	else if (__tmp > 65535)
    28d0:	fe 01       	movw	r30, r28
    28d2:	e3 5b       	subi	r30, 0xB3	; 179
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	60 81       	ld	r22, Z
    28d8:	71 81       	ldd	r23, Z+1	; 0x01
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	93 81       	ldd	r25, Z+3	; 0x03
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	0c f0       	brlt	.+2      	; 0x28f0 <main+0x4fc>
    28ee:	43 c0       	rjmp	.+134    	; 0x2976 <main+0x582>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	fe 01       	movw	r30, r28
    28f2:	ef 5a       	subi	r30, 0xAF	; 175
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8e 01       	movw	r16, r28
    2910:	05 5b       	subi	r16, 0xB5	; 181
    2912:	1f 4f       	sbci	r17, 0xFF	; 255
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	f8 01       	movw	r30, r16
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    2926:	1f c0       	rjmp	.+62     	; 0x2966 <main+0x572>
    2928:	fe 01       	movw	r30, r28
    292a:	e7 5b       	subi	r30, 0xB7	; 183
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	88 ec       	ldi	r24, 0xC8	; 200
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
    2936:	fe 01       	movw	r30, r28
    2938:	e7 5b       	subi	r30, 0xB7	; 183
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <main+0x54c>
    2944:	fe 01       	movw	r30, r28
    2946:	e7 5b       	subi	r30, 0xB7	; 183
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294e:	de 01       	movw	r26, r28
    2950:	a5 5b       	subi	r26, 0xB5	; 181
    2952:	bf 4f       	sbci	r27, 0xFF	; 255
    2954:	fe 01       	movw	r30, r28
    2956:	e5 5b       	subi	r30, 0xB5	; 181
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	11 96       	adiw	r26, 0x01	; 1
    2962:	9c 93       	st	X, r25
    2964:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	fe 01       	movw	r30, r28
    2968:	e5 5b       	subi	r30, 0xB5	; 181
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	d1 f6       	brne	.-76     	; 0x2928 <main+0x534>
    2974:	27 c0       	rjmp	.+78     	; 0x29c4 <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2976:	8e 01       	movw	r16, r28
    2978:	05 5b       	subi	r16, 0xB5	; 181
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	fe 01       	movw	r30, r28
    297e:	e3 5b       	subi	r30, 0xB3	; 179
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	f8 01       	movw	r30, r16
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
    2998:	de 01       	movw	r26, r28
    299a:	a9 5b       	subi	r26, 0xB9	; 185
    299c:	bf 4f       	sbci	r27, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	e5 5b       	subi	r30, 0xB5	; 181
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	8d 93       	st	X+, r24
    29aa:	9c 93       	st	X, r25
    29ac:	fe 01       	movw	r30, r28
    29ae:	e9 5b       	subi	r30, 0xB9	; 185
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <main+0x5c2>
    29ba:	fe 01       	movw	r30, r28
    29bc:	e9 5b       	subi	r30, 0xB9	; 185
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
		{
			_delay_ms(500);
		LCD_SendCMD(CLEAR_DISPLAY);
		PWflag = 1;
		LCD_SendString("Password : ");
		for(int i=0;i<4;i++)
    29c4:	de 01       	movw	r26, r28
    29c6:	af 58       	subi	r26, 0x8F	; 143
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	ef 58       	subi	r30, 0x8F	; 143
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	11 96       	adiw	r26, 0x01	; 1
    29d8:	9c 93       	st	X, r25
    29da:	8e 93       	st	-X, r24
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 58       	subi	r30, 0x8F	; 143
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	91 81       	ldd	r25, Z+1	; 0x01
    29e6:	84 30       	cpi	r24, 0x04	; 4
    29e8:	91 05       	cpc	r25, r1
    29ea:	0c f4       	brge	.+2      	; 0x29ee <main+0x5fa>
    29ec:	0f cf       	rjmp	.-482    	; 0x280c <main+0x418>
    29ee:	2a c0       	rjmp	.+84     	; 0x2a44 <main+0x650>
			_delay_ms(200);
		}

		while(PWflag == 1 && j < 4)
		{
			if(PaswordEnter[j] != PasswordCorrect[j] ) PWflag = 0;
    29f0:	fe 01       	movw	r30, r28
    29f2:	ec 58       	subi	r30, 0x8C	; 140
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	20 81       	ld	r18, Z
    29f8:	31 81       	ldd	r19, Z+1	; 0x01
    29fa:	ce 01       	movw	r24, r28
    29fc:	8c 57       	subi	r24, 0x7C	; 124
    29fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2a00:	fc 01       	movw	r30, r24
    2a02:	e2 0f       	add	r30, r18
    2a04:	f3 1f       	adc	r31, r19
    2a06:	40 81       	ld	r20, Z
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ec 58       	subi	r30, 0x8C	; 140
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	20 81       	ld	r18, Z
    2a10:	31 81       	ldd	r19, Z+1	; 0x01
    2a12:	ce 01       	movw	r24, r28
    2a14:	81 58       	subi	r24, 0x81	; 129
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	fc 01       	movw	r30, r24
    2a1a:	e2 0f       	add	r30, r18
    2a1c:	f3 1f       	adc	r31, r19
    2a1e:	80 81       	ld	r24, Z
    2a20:	48 17       	cp	r20, r24
    2a22:	21 f0       	breq	.+8      	; 0x2a2c <main+0x638>
    2a24:	fe 01       	movw	r30, r28
    2a26:	e2 58       	subi	r30, 0x82	; 130
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	10 82       	st	Z, r1
			j++;
    2a2c:	de 01       	movw	r26, r28
    2a2e:	ac 58       	subi	r26, 0x8C	; 140
    2a30:	bf 4f       	sbci	r27, 0xFF	; 255
    2a32:	fe 01       	movw	r30, r28
    2a34:	ec 58       	subi	r30, 0x8C	; 140
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	01 96       	adiw	r24, 0x01	; 1
    2a3e:	11 96       	adiw	r26, 0x01	; 1
    2a40:	9c 93       	st	X, r25
    2a42:	8e 93       	st	-X, r24
			else i--;
			button = NO_KEY;
			_delay_ms(200);
		}

		while(PWflag == 1 && j < 4)
    2a44:	fe 01       	movw	r30, r28
    2a46:	e2 58       	subi	r30, 0x82	; 130
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	41 f4       	brne	.+16     	; 0x2a60 <main+0x66c>
    2a50:	fe 01       	movw	r30, r28
    2a52:	ec 58       	subi	r30, 0x8C	; 140
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
    2a5a:	84 30       	cpi	r24, 0x04	; 4
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	44 f2       	brlt	.-112    	; 0x29f0 <main+0x5fc>
		{
			if(PaswordEnter[j] != PasswordCorrect[j] ) PWflag = 0;
			j++;
		}
		if(PWflag) {
    2a60:	fe 01       	movw	r30, r28
    2a62:	e2 58       	subi	r30, 0x82	; 130
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	88 23       	and	r24, r24
    2a6a:	71 f0       	breq	.+28     	; 0x2a88 <main+0x694>
			LCD_SendCMD(CLEAR_DISPLAY);
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
			LCD_SendString("Valid Password");
    2a72:	8b e7       	ldi	r24, 0x7B	; 123
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_SendString>
			LCD_SendStringxy("Press C to cont",0,1);
    2a7a:	8a e8       	ldi	r24, 0x8A	; 138
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_SendStringxy>
    2a86:	07 c0       	rjmp	.+14     	; 0x2a96 <main+0x6a2>
		}
		else
		{
			LCD_SendCMD(CLEAR_DISPLAY);
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
		    LCD_SendString("invalid Password");
    2a8e:	8a e9       	ldi	r24, 0x9A	; 154
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_SendString>
	{
		// Password Entry Section
		LCD_SendCMD(CLEAR_DISPLAY);
		LCD_SendString("Welcome to CAL");
		_delay_ms(1000);
		while(PWflag == 0)
    2a96:	fe 01       	movw	r30, r28
    2a98:	e2 58       	subi	r30, 0x82	; 130
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <main+0x6b0>
    2aa2:	ef cd       	rjmp	.-1058   	; 0x2682 <main+0x28e>
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <main+0x6ba>
			LCD_SendCMD(CLEAR_DISPLAY);
		    LCD_SendString("invalid Password");
		}
		}
		while (button != 'C')
		button = Keypad_Read();
    2aa6:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Keypad_Read>
    2aaa:	80 93 23 02 	sts	0x0223, r24
		{
			LCD_SendCMD(CLEAR_DISPLAY);
		    LCD_SendString("invalid Password");
		}
		}
		while (button != 'C')
    2aae:	80 91 23 02 	lds	r24, 0x0223
    2ab2:	83 34       	cpi	r24, 0x43	; 67
    2ab4:	c1 f7       	brne	.-16     	; 0x2aa6 <main+0x6b2>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ed 5b       	subi	r30, 0xBD	; 189
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a8 e4       	ldi	r26, 0x48	; 72
    2ac2:	b3 e4       	ldi	r27, 0x43	; 67
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	8e 01       	movw	r16, r28
    2ace:	01 5c       	subi	r16, 0xC1	; 193
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 5b       	subi	r30, 0xBD	; 189
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	60 81       	ld	r22, Z
    2ada:	71 81       	ldd	r23, Z+1	; 0x01
    2adc:	82 81       	ldd	r24, Z+2	; 0x02
    2ade:	93 81       	ldd	r25, Z+3	; 0x03
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a ef       	ldi	r20, 0xFA	; 250
    2ae6:	54 e4       	ldi	r21, 0x44	; 68
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2afa:	fe 01       	movw	r30, r28
    2afc:	ff 96       	adiw	r30, 0x3f	; 63
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <main+0x72c>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9e af       	std	Y+62, r25	; 0x3e
    2b1c:	8d af       	std	Y+61, r24	; 0x3d
    2b1e:	46 c0       	rjmp	.+140    	; 0x2bac <main+0x7b8>
	else if (__tmp > 65535)
    2b20:	fe 01       	movw	r30, r28
    2b22:	ff 96       	adiw	r30, 0x3f	; 63
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	64 f5       	brge	.+88     	; 0x2b94 <main+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ed 5b       	subi	r30, 0xBD	; 189
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e af       	std	Y+62, r25	; 0x3e
    2b68:	8d af       	std	Y+61, r24	; 0x3d
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <main+0x796>
    2b6c:	88 ec       	ldi	r24, 0xC8	; 200
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c af       	std	Y+60, r25	; 0x3c
    2b72:	8b af       	std	Y+59, r24	; 0x3b
    2b74:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b76:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <main+0x784>
    2b7c:	9c af       	std	Y+60, r25	; 0x3c
    2b7e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	9e af       	std	Y+62, r25	; 0x3e
    2b88:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	69 f7       	brne	.-38     	; 0x2b6c <main+0x778>
    2b92:	8d c2       	rjmp	.+1306   	; 0x30ae <main+0xcba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b94:	fe 01       	movw	r30, r28
    2b96:	ff 96       	adiw	r30, 0x3f	; 63
    2b98:	60 81       	ld	r22, Z
    2b9a:	71 81       	ldd	r23, Z+1	; 0x01
    2b9c:	82 81       	ldd	r24, Z+2	; 0x02
    2b9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9e af       	std	Y+62, r25	; 0x3e
    2baa:	8d af       	std	Y+61, r24	; 0x3d
    2bac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb0:	9a af       	std	Y+58, r25	; 0x3a
    2bb2:	89 af       	std	Y+57, r24	; 0x39
    2bb4:	89 ad       	ldd	r24, Y+57	; 0x39
    2bb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <main+0x7c4>
    2bbc:	9a af       	std	Y+58, r25	; 0x3a
    2bbe:	89 af       	std	Y+57, r24	; 0x39
    2bc0:	76 c2       	rjmp	.+1260   	; 0x30ae <main+0xcba>
		_delay_ms(200);
      // Calculator Section
		while(flag == 0)
		{
			while (button != 'C' )
			button = Keypad_Read();
    2bc2:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Keypad_Read>
    2bc6:	80 93 23 02 	sts	0x0223, r24
		button = Keypad_Read();
		_delay_ms(200);
      // Calculator Section
		while(flag == 0)
		{
			while (button != 'C' )
    2bca:	80 91 23 02 	lds	r24, 0x0223
    2bce:	83 34       	cpi	r24, 0x43	; 67
    2bd0:	c1 f7       	brne	.-16     	; 0x2bc2 <main+0x7ce>
    2bd2:	63 c2       	rjmp	.+1222   	; 0x309a <main+0xca6>
			button = Keypad_Read();
	  while(button == 'C')
		{
		button  = NO_KEY;
    2bd4:	8f ef       	ldi	r24, 0xFF	; 255
    2bd6:	80 93 23 02 	sts	0x0223, r24
		LCD_SendCMD(CLEAR_DISPLAY);
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
    2be0:	0a c1       	rjmp	.+532    	; 0x2df6 <main+0xa02>
		//LCD_SendString("EQN : ");
		while(op == 0)
		{
			a *=10;
    2be2:	8e 01       	movw	r16, r28
    2be4:	06 58       	subi	r16, 0x86	; 134
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	fe 01       	movw	r30, r28
    2bea:	e6 58       	subi	r30, 0x86	; 134
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e2       	ldi	r20, 0x20	; 32
    2bfc:	51 e4       	ldi	r21, 0x41	; 65
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	f8 01       	movw	r30, r16
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	a2 83       	std	Z+2, r26	; 0x02
    2c0e:	b3 83       	std	Z+3, r27	; 0x03
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <main+0x826>
		while (button == NO_KEY)
		button = Keypad_Read();
    2c12:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Keypad_Read>
    2c16:	80 93 23 02 	sts	0x0223, r24
		LCD_SendCMD(CLEAR_DISPLAY);
		//LCD_SendString("EQN : ");
		while(op == 0)
		{
			a *=10;
		while (button == NO_KEY)
    2c1a:	80 91 23 02 	lds	r24, 0x0223
    2c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c20:	c1 f3       	breq	.-16     	; 0x2c12 <main+0x81e>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a8 e4       	ldi	r26, 0x48	; 72
    2c28:	b3 e4       	ldi	r27, 0x43	; 67
    2c2a:	8d ab       	std	Y+53, r24	; 0x35
    2c2c:	9e ab       	std	Y+54, r25	; 0x36
    2c2e:	af ab       	std	Y+55, r26	; 0x37
    2c30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	6d a9       	ldd	r22, Y+53	; 0x35
    2c34:	7e a9       	ldd	r23, Y+54	; 0x36
    2c36:	8f a9       	ldd	r24, Y+55	; 0x37
    2c38:	98 ad       	ldd	r25, Y+56	; 0x38
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	89 ab       	std	Y+49, r24	; 0x31
    2c4c:	9a ab       	std	Y+50, r25	; 0x32
    2c4e:	ab ab       	std	Y+51, r26	; 0x33
    2c50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c52:	69 a9       	ldd	r22, Y+49	; 0x31
    2c54:	7a a9       	ldd	r23, Y+50	; 0x32
    2c56:	8b a9       	ldd	r24, Y+51	; 0x33
    2c58:	9c a9       	ldd	r25, Y+52	; 0x34
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <main+0x880>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	98 ab       	std	Y+48, r25	; 0x30
    2c70:	8f a7       	std	Y+47, r24	; 0x2f
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <main+0x8fe>
	else if (__tmp > 65535)
    2c74:	69 a9       	ldd	r22, Y+49	; 0x31
    2c76:	7a a9       	ldd	r23, Y+50	; 0x32
    2c78:	8b a9       	ldd	r24, Y+51	; 0x33
    2c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <main+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c90:	8f a9       	ldd	r24, Y+55	; 0x37
    2c92:	98 ad       	ldd	r25, Y+56	; 0x38
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	98 ab       	std	Y+48, r25	; 0x30
    2cb2:	8f a7       	std	Y+47, r24	; 0x2f
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <main+0x8e0>
    2cb6:	88 ec       	ldi	r24, 0xC8	; 200
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9e a7       	std	Y+46, r25	; 0x2e
    2cbc:	8d a7       	std	Y+45, r24	; 0x2d
    2cbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <main+0x8ce>
    2cc6:	9e a7       	std	Y+46, r25	; 0x2e
    2cc8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	98 ab       	std	Y+48, r25	; 0x30
    2cd2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <main+0x8c2>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <main+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	69 a9       	ldd	r22, Y+49	; 0x31
    2ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	98 ab       	std	Y+48, r25	; 0x30
    2cf0:	8f a7       	std	Y+47, r24	; 0x2f
    2cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf6:	9c a7       	std	Y+44, r25	; 0x2c
    2cf8:	8b a7       	std	Y+43, r24	; 0x2b
    2cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <main+0x90a>
    2d02:	9c a7       	std	Y+44, r25	; 0x2c
    2d04:	8b a7       	std	Y+43, r24	; 0x2b
		button = Keypad_Read();
		_delay_ms(200);

		switch(button)
    2d06:	80 91 23 02 	lds	r24, 0x0223
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	c7 57       	subi	r28, 0x77	; 119
    2d10:	df 4f       	sbci	r29, 0xFF	; 255
    2d12:	39 83       	std	Y+1, r19	; 0x01
    2d14:	28 83       	st	Y, r18
    2d16:	c9 58       	subi	r28, 0x89	; 137
    2d18:	d0 40       	sbci	r29, 0x00	; 0
    2d1a:	c7 57       	subi	r28, 0x77	; 119
    2d1c:	df 4f       	sbci	r29, 0xFF	; 255
    2d1e:	88 81       	ld	r24, Y
    2d20:	99 81       	ldd	r25, Y+1	; 0x01
    2d22:	c9 58       	subi	r28, 0x89	; 137
    2d24:	d0 40       	sbci	r29, 0x00	; 0
    2d26:	8f 32       	cpi	r24, 0x2F	; 47
    2d28:	91 05       	cpc	r25, r1
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <main+0x93a>
    2d2c:	57 c0       	rjmp	.+174    	; 0x2ddc <main+0x9e8>
    2d2e:	c7 57       	subi	r28, 0x77	; 119
    2d30:	df 4f       	sbci	r29, 0xFF	; 255
    2d32:	e8 81       	ld	r30, Y
    2d34:	f9 81       	ldd	r31, Y+1	; 0x01
    2d36:	c9 58       	subi	r28, 0x89	; 137
    2d38:	d0 40       	sbci	r29, 0x00	; 0
    2d3a:	e0 33       	cpi	r30, 0x30	; 48
    2d3c:	f1 05       	cpc	r31, r1
    2d3e:	ec f4       	brge	.+58     	; 0x2d7a <main+0x986>
    2d40:	c7 57       	subi	r28, 0x77	; 119
    2d42:	df 4f       	sbci	r29, 0xFF	; 255
    2d44:	28 81       	ld	r18, Y
    2d46:	39 81       	ldd	r19, Y+1	; 0x01
    2d48:	c9 58       	subi	r28, 0x89	; 137
    2d4a:	d0 40       	sbci	r29, 0x00	; 0
    2d4c:	2a 32       	cpi	r18, 0x2A	; 42
    2d4e:	31 05       	cpc	r19, r1
    2d50:	0c f4       	brge	.+2      	; 0x2d54 <main+0x960>
    2d52:	4e c0       	rjmp	.+156    	; 0x2df0 <main+0x9fc>
    2d54:	c7 57       	subi	r28, 0x77	; 119
    2d56:	df 4f       	sbci	r29, 0xFF	; 255
    2d58:	88 81       	ld	r24, Y
    2d5a:	99 81       	ldd	r25, Y+1	; 0x01
    2d5c:	c9 58       	subi	r28, 0x89	; 137
    2d5e:	d0 40       	sbci	r29, 0x00	; 0
    2d60:	8c 32       	cpi	r24, 0x2C	; 44
    2d62:	91 05       	cpc	r25, r1
    2d64:	dc f1       	brlt	.+118    	; 0x2ddc <main+0x9e8>
    2d66:	c7 57       	subi	r28, 0x77	; 119
    2d68:	df 4f       	sbci	r29, 0xFF	; 255
    2d6a:	e8 81       	ld	r30, Y
    2d6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d6e:	c9 58       	subi	r28, 0x89	; 137
    2d70:	d0 40       	sbci	r29, 0x00	; 0
    2d72:	ed 32       	cpi	r30, 0x2D	; 45
    2d74:	f1 05       	cpc	r31, r1
    2d76:	91 f1       	breq	.+100    	; 0x2ddc <main+0x9e8>
    2d78:	3b c0       	rjmp	.+118    	; 0x2df0 <main+0x9fc>
    2d7a:	c7 57       	subi	r28, 0x77	; 119
    2d7c:	df 4f       	sbci	r29, 0xFF	; 255
    2d7e:	28 81       	ld	r18, Y
    2d80:	39 81       	ldd	r19, Y+1	; 0x01
    2d82:	c9 58       	subi	r28, 0x89	; 137
    2d84:	d0 40       	sbci	r29, 0x00	; 0
    2d86:	2a 33       	cpi	r18, 0x3A	; 58
    2d88:	31 05       	cpc	r19, r1
    2d8a:	94 f5       	brge	.+100    	; 0x2df0 <main+0x9fc>
		{ case '0':case '1':case '2':case '3':case '4':
		  case '5':case '6':case '7':case '8':case '9':
			  a += KEY2NUM(button);LCD_SendData(button); break;
    2d8c:	80 91 23 02 	lds	r24, 0x0223
    2d90:	0e 94 75 19 	call	0x32ea	; 0x32ea <KEY2NUM>
    2d94:	aa 27       	eor	r26, r26
    2d96:	97 fd       	sbrc	r25, 7
    2d98:	a0 95       	com	r26
    2d9a:	ba 2f       	mov	r27, r26
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	8e 01       	movw	r16, r28
    2daa:	06 58       	subi	r16, 0x86	; 134
    2dac:	1f 4f       	sbci	r17, 0xFF	; 255
    2dae:	fe 01       	movw	r30, r28
    2db0:	e6 58       	subi	r30, 0x86	; 134
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	20 81       	ld	r18, Z
    2dba:	31 81       	ldd	r19, Z+1	; 0x01
    2dbc:	42 81       	ldd	r20, Z+2	; 0x02
    2dbe:	53 81       	ldd	r21, Z+3	; 0x03
    2dc0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	f8 01       	movw	r30, r16
    2dca:	80 83       	st	Z, r24
    2dcc:	91 83       	std	Z+1, r25	; 0x01
    2dce:	a2 83       	std	Z+2, r26	; 0x02
    2dd0:	b3 83       	std	Z+3, r27	; 0x03
    2dd2:	80 91 23 02 	lds	r24, 0x0223
    2dd6:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    2dda:	0a c0       	rjmp	.+20     	; 0x2df0 <main+0x9fc>

		  case '+':case '*':case '/':case '-':
			  op = button;LCD_SendData(button); break;
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ed 58       	subi	r30, 0x8D	; 141
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 91 23 02 	lds	r24, 0x0223
    2de6:	80 83       	st	Z, r24
    2de8:	80 91 23 02 	lds	r24, 0x0223
    2dec:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>

		}
		button  = NO_KEY;
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	80 93 23 02 	sts	0x0223, r24
	  while(button == 'C')
		{
		button  = NO_KEY;
		LCD_SendCMD(CLEAR_DISPLAY);
		//LCD_SendString("EQN : ");
		while(op == 0)
    2df6:	fe 01       	movw	r30, r28
    2df8:	ed 58       	subi	r30, 0x8D	; 141
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	88 23       	and	r24, r24
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <main+0xa10>
    2e02:	ef ce       	rjmp	.-546    	; 0x2be2 <main+0x7ee>
    2e04:	c4 c0       	rjmp	.+392    	; 0x2f8e <main+0xb9a>
		button  = NO_KEY;
	    }

		while(button != '=')
		{
			b *=10;
    2e06:	8e 01       	movw	r16, r28
    2e08:	0a 58       	subi	r16, 0x8A	; 138
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ea 58       	subi	r30, 0x8A	; 138
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e2       	ldi	r20, 0x20	; 32
    2e20:	51 e4       	ldi	r21, 0x41	; 65
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	80 83       	st	Z, r24
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	a2 83       	std	Z+2, r26	; 0x02
    2e32:	b3 83       	std	Z+3, r27	; 0x03
		button  = NO_KEY;
    2e34:	8f ef       	ldi	r24, 0xFF	; 255
    2e36:	80 93 23 02 	sts	0x0223, r24
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <main+0xa50>
		while (button == NO_KEY)
		button = Keypad_Read();
    2e3c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Keypad_Read>
    2e40:	80 93 23 02 	sts	0x0223, r24

		while(button != '=')
		{
			b *=10;
		button  = NO_KEY;
		while (button == NO_KEY)
    2e44:	80 91 23 02 	lds	r24, 0x0223
    2e48:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4a:	c1 f3       	breq	.-16     	; 0x2e3c <main+0xa48>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a8 e4       	ldi	r26, 0x48	; 72
    2e52:	b3 e4       	ldi	r27, 0x43	; 67
    2e54:	8f a3       	std	Y+39, r24	; 0x27
    2e56:	98 a7       	std	Y+40, r25	; 0x28
    2e58:	a9 a7       	std	Y+41, r26	; 0x29
    2e5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e60:	89 a5       	ldd	r24, Y+41	; 0x29
    2e62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a ef       	ldi	r20, 0xFA	; 250
    2e6a:	54 e4       	ldi	r21, 0x44	; 68
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8b a3       	std	Y+35, r24	; 0x23
    2e76:	9c a3       	std	Y+36, r25	; 0x24
    2e78:	ad a3       	std	Y+37, r26	; 0x25
    2e7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e80:	8d a1       	ldd	r24, Y+37	; 0x25
    2e82:	9e a1       	ldd	r25, Y+38	; 0x26
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <main+0xaaa>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9a a3       	std	Y+34, r25	; 0x22
    2e9a:	89 a3       	std	Y+33, r24	; 0x21
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <main+0xb28>
	else if (__tmp > 65535)
    2e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <main+0xb14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eba:	89 a5       	ldd	r24, Y+41	; 0x29
    2ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9a a3       	std	Y+34, r25	; 0x22
    2edc:	89 a3       	std	Y+33, r24	; 0x21
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <main+0xb0a>
    2ee0:	88 ec       	ldi	r24, 0xC8	; 200
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	98 a3       	std	Y+32, r25	; 0x20
    2ee6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eea:	98 a1       	ldd	r25, Y+32	; 0x20
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <main+0xaf8>
    2ef0:	98 a3       	std	Y+32, r25	; 0x20
    2ef2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9a a3       	std	Y+34, r25	; 0x22
    2efc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	89 a1       	ldd	r24, Y+33	; 0x21
    2f00:	9a a1       	ldd	r25, Y+34	; 0x22
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <main+0xaec>
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <main+0xb3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f20:	9e 8f       	std	Y+30, r25	; 0x1e
    2f22:	8d 8f       	std	Y+29, r24	; 0x1d
    2f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <main+0xb34>
    2f2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2e:	8d 8f       	std	Y+29, r24	; 0x1d
		button = Keypad_Read();
		_delay_ms(200);
		switch(button)
    2f30:	80 91 23 02 	lds	r24, 0x0223
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	c0 97       	sbiw	r24, 0x30	; 48
    2f3a:	8a 30       	cpi	r24, 0x0A	; 10
    2f3c:	91 05       	cpc	r25, r1
    2f3e:	38 f5       	brcc	.+78     	; 0x2f8e <main+0xb9a>
				{ case '0':case '1':case '2':case '3':case '4':
				  case '5':case '6':case '7':case '8':case '9':
					  b += KEY2NUM(button);LCD_SendData(button); break;
    2f40:	80 91 23 02 	lds	r24, 0x0223
    2f44:	0e 94 75 19 	call	0x32ea	; 0x32ea <KEY2NUM>
    2f48:	aa 27       	eor	r26, r26
    2f4a:	97 fd       	sbrc	r25, 7
    2f4c:	a0 95       	com	r26
    2f4e:	ba 2f       	mov	r27, r26
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	8e 01       	movw	r16, r28
    2f5e:	0a 58       	subi	r16, 0x8A	; 138
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	fe 01       	movw	r30, r28
    2f64:	ea 58       	subi	r30, 0x8A	; 138
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	20 81       	ld	r18, Z
    2f6e:	31 81       	ldd	r19, Z+1	; 0x01
    2f70:	42 81       	ldd	r20, Z+2	; 0x02
    2f72:	53 81       	ldd	r21, Z+3	; 0x03
    2f74:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	80 83       	st	Z, r24
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	a2 83       	std	Z+2, r26	; 0x02
    2f84:	b3 83       	std	Z+3, r27	; 0x03
    2f86:	80 91 23 02 	lds	r24, 0x0223
    2f8a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>

		}
		button  = NO_KEY;
	    }

		while(button != '=')
    2f8e:	80 91 23 02 	lds	r24, 0x0223
    2f92:	8d 33       	cpi	r24, 0x3D	; 61
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <main+0xba4>
    2f96:	37 cf       	rjmp	.-402    	; 0x2e06 <main+0xa12>
				{ case '0':case '1':case '2':case '3':case '4':
				  case '5':case '6':case '7':case '8':case '9':
					  b += KEY2NUM(button);LCD_SendData(button); break;
				}
		}
		a/=10;b/=10;
    2f98:	8e 01       	movw	r16, r28
    2f9a:	06 58       	subi	r16, 0x86	; 134
    2f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	e6 58       	subi	r30, 0x86	; 134
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	60 81       	ld	r22, Z
    2fa6:	71 81       	ldd	r23, Z+1	; 0x01
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e2       	ldi	r20, 0x20	; 32
    2fb2:	51 e4       	ldi	r21, 0x41	; 65
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	f8 01       	movw	r30, r16
    2fbe:	80 83       	st	Z, r24
    2fc0:	91 83       	std	Z+1, r25	; 0x01
    2fc2:	a2 83       	std	Z+2, r26	; 0x02
    2fc4:	b3 83       	std	Z+3, r27	; 0x03
    2fc6:	8e 01       	movw	r16, r28
    2fc8:	0a 58       	subi	r16, 0x8A	; 138
    2fca:	1f 4f       	sbci	r17, 0xFF	; 255
    2fcc:	fe 01       	movw	r30, r28
    2fce:	ea 58       	subi	r30, 0x8A	; 138
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e2       	ldi	r20, 0x20	; 32
    2fe0:	51 e4       	ldi	r21, 0x41	; 65
    2fe2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	f8 01       	movw	r30, r16
    2fec:	80 83       	st	Z, r24
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	a2 83       	std	Z+2, r26	; 0x02
    2ff2:	b3 83       	std	Z+3, r27	; 0x03
	    LCD_SendString(" = ");
    2ff4:	8b ea       	ldi	r24, 0xAB	; 171
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_SendString>
	    LCD_SendCMD(CLEAR_DISPLAY);
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_SendCMD>
	   // LCD_SendString("Result = ");
		operation(a,op,b);
    3002:	fe 01       	movw	r30, r28
    3004:	e6 58       	subi	r30, 0x86	; 134
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	80 81       	ld	r24, Z
    300a:	91 81       	ldd	r25, Z+1	; 0x01
    300c:	a2 81       	ldd	r26, Z+2	; 0x02
    300e:	b3 81       	ldd	r27, Z+3	; 0x03
    3010:	ae 01       	movw	r20, r28
    3012:	4d 58       	subi	r20, 0x8D	; 141
    3014:	5f 4f       	sbci	r21, 0xFF	; 255
    3016:	fe 01       	movw	r30, r28
    3018:	ea 58       	subi	r30, 0x8A	; 138
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	00 81       	ld	r16, Z
    301e:	11 81       	ldd	r17, Z+1	; 0x01
    3020:	22 81       	ldd	r18, Z+2	; 0x02
    3022:	33 81       	ldd	r19, Z+3	; 0x03
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	fa 01       	movw	r30, r20
    302a:	40 81       	ld	r20, Z
    302c:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <operation>
		LCD_SendStringxy("C cont,= reset",0,1);
    3030:	8f ea       	ldi	r24, 0xAF	; 175
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LCD_SendStringxy>
		button = NO_KEY;
    303c:	8f ef       	ldi	r24, 0xFF	; 255
    303e:	80 93 23 02 	sts	0x0223, r24
		op = 0; a=0 ; b=0;PWflag = 0;j=0;
    3042:	fe 01       	movw	r30, r28
    3044:	ed 58       	subi	r30, 0x8D	; 141
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	10 82       	st	Z, r1
    304a:	fe 01       	movw	r30, r28
    304c:	e6 58       	subi	r30, 0x86	; 134
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a0 e0       	ldi	r26, 0x00	; 0
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	80 83       	st	Z, r24
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	a2 83       	std	Z+2, r26	; 0x02
    305e:	b3 83       	std	Z+3, r27	; 0x03
    3060:	fe 01       	movw	r30, r28
    3062:	ea 58       	subi	r30, 0x8A	; 138
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	a0 e0       	ldi	r26, 0x00	; 0
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	80 83       	st	Z, r24
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	a2 83       	std	Z+2, r26	; 0x02
    3074:	b3 83       	std	Z+3, r27	; 0x03
    3076:	fe 01       	movw	r30, r28
    3078:	e2 58       	subi	r30, 0x82	; 130
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	10 82       	st	Z, r1
    307e:	fe 01       	movw	r30, r28
    3080:	ec 58       	subi	r30, 0x8C	; 140
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	11 82       	std	Z+1, r1	; 0x01
    3086:	10 82       	st	Z, r1
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <main+0xc9e>
		while (button == NO_KEY)
		button = Keypad_Read();
    308a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Keypad_Read>
    308e:	80 93 23 02 	sts	0x0223, r24
	   // LCD_SendString("Result = ");
		operation(a,op,b);
		LCD_SendStringxy("C cont,= reset",0,1);
		button = NO_KEY;
		op = 0; a=0 ; b=0;PWflag = 0;j=0;
		while (button == NO_KEY)
    3092:	80 91 23 02 	lds	r24, 0x0223
    3096:	8f 3f       	cpi	r24, 0xFF	; 255
    3098:	c1 f3       	breq	.-16     	; 0x308a <main+0xc96>
      // Calculator Section
		while(flag == 0)
		{
			while (button != 'C' )
			button = Keypad_Read();
	  while(button == 'C')
    309a:	80 91 23 02 	lds	r24, 0x0223
    309e:	83 34       	cpi	r24, 0x43	; 67
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <main+0xcb0>
    30a2:	98 cd       	rjmp	.-1232   	; 0x2bd4 <main+0x7e0>
		button = NO_KEY;
		op = 0; a=0 ; b=0;PWflag = 0;j=0;
		while (button == NO_KEY)
		button = Keypad_Read();
		}
	  if(button == '=') break;
    30a4:	80 91 23 02 	lds	r24, 0x0223
    30a8:	8d 33       	cpi	r24, 0x3D	; 61
    30aa:	09 f4       	brne	.+2      	; 0x30ae <main+0xcba>
    30ac:	18 c1       	rjmp	.+560    	; 0x32de <main+0xeea>
		}
		while (button != 'C')
		button = Keypad_Read();
		_delay_ms(200);
      // Calculator Section
		while(flag == 0)
    30ae:	80 91 2a 02 	lds	r24, 0x022A
    30b2:	88 23       	and	r24, r24
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <main+0xcc4>
    30b6:	89 cd       	rjmp	.-1262   	; 0x2bca <main+0x7d6>
    30b8:	12 c1       	rjmp	.+548    	; 0x32de <main+0xeea>
		button = Keypad_Read();
		}
	  if(button == '=') break;
	}
	while(flag == 1){
			DIO_Write(PORTD_0,HIGH);
    30ba:	88 e1       	ldi	r24, 0x18	; 24
    30bc:	61 e0       	ldi	r22, 0x01	; 1
    30be:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	aa e7       	ldi	r26, 0x7A	; 122
    30c8:	b4 e4       	ldi	r27, 0x44	; 68
    30ca:	89 8f       	std	Y+25, r24	; 0x19
    30cc:	9a 8f       	std	Y+26, r25	; 0x1a
    30ce:	ab 8f       	std	Y+27, r26	; 0x1b
    30d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d2:	69 8d       	ldd	r22, Y+25	; 0x19
    30d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	4a ef       	ldi	r20, 0xFA	; 250
    30e0:	54 e4       	ldi	r21, 0x44	; 68
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	8d 8b       	std	Y+21, r24	; 0x15
    30ec:	9e 8b       	std	Y+22, r25	; 0x16
    30ee:	af 8b       	std	Y+23, r26	; 0x17
    30f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30f2:	6d 89       	ldd	r22, Y+21	; 0x15
    30f4:	7e 89       	ldd	r23, Y+22	; 0x16
    30f6:	8f 89       	ldd	r24, Y+23	; 0x17
    30f8:	98 8d       	ldd	r25, Y+24	; 0x18
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e8       	ldi	r20, 0x80	; 128
    3100:	5f e3       	ldi	r21, 0x3F	; 63
    3102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3106:	88 23       	and	r24, r24
    3108:	2c f4       	brge	.+10     	; 0x3114 <main+0xd20>
		__ticks = 1;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	9c 8b       	std	Y+20, r25	; 0x14
    3110:	8b 8b       	std	Y+19, r24	; 0x13
    3112:	3f c0       	rjmp	.+126    	; 0x3192 <main+0xd9e>
	else if (__tmp > 65535)
    3114:	6d 89       	ldd	r22, Y+21	; 0x15
    3116:	7e 89       	ldd	r23, Y+22	; 0x16
    3118:	8f 89       	ldd	r24, Y+23	; 0x17
    311a:	98 8d       	ldd	r25, Y+24	; 0x18
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	3f ef       	ldi	r19, 0xFF	; 255
    3120:	4f e7       	ldi	r20, 0x7F	; 127
    3122:	57 e4       	ldi	r21, 0x47	; 71
    3124:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	4c f5       	brge	.+82     	; 0x317e <main+0xd8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312c:	69 8d       	ldd	r22, Y+25	; 0x19
    312e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e2       	ldi	r20, 0x20	; 32
    313a:	51 e4       	ldi	r21, 0x41	; 65
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	bc 01       	movw	r22, r24
    3146:	cd 01       	movw	r24, r26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9c 8b       	std	Y+20, r25	; 0x14
    3152:	8b 8b       	std	Y+19, r24	; 0x13
    3154:	0f c0       	rjmp	.+30     	; 0x3174 <main+0xd80>
    3156:	88 ec       	ldi	r24, 0xC8	; 200
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	9a 8b       	std	Y+18, r25	; 0x12
    315c:	89 8b       	std	Y+17, r24	; 0x11
    315e:	89 89       	ldd	r24, Y+17	; 0x11
    3160:	9a 89       	ldd	r25, Y+18	; 0x12
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	f1 f7       	brne	.-4      	; 0x3162 <main+0xd6e>
    3166:	9a 8b       	std	Y+18, r25	; 0x12
    3168:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316a:	8b 89       	ldd	r24, Y+19	; 0x13
    316c:	9c 89       	ldd	r25, Y+20	; 0x14
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	9c 8b       	std	Y+20, r25	; 0x14
    3172:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3174:	8b 89       	ldd	r24, Y+19	; 0x13
    3176:	9c 89       	ldd	r25, Y+20	; 0x14
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	69 f7       	brne	.-38     	; 0x3156 <main+0xd62>
    317c:	14 c0       	rjmp	.+40     	; 0x31a6 <main+0xdb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317e:	6d 89       	ldd	r22, Y+21	; 0x15
    3180:	7e 89       	ldd	r23, Y+22	; 0x16
    3182:	8f 89       	ldd	r24, Y+23	; 0x17
    3184:	98 8d       	ldd	r25, Y+24	; 0x18
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9c 8b       	std	Y+20, r25	; 0x14
    3190:	8b 8b       	std	Y+19, r24	; 0x13
    3192:	8b 89       	ldd	r24, Y+19	; 0x13
    3194:	9c 89       	ldd	r25, Y+20	; 0x14
    3196:	98 8b       	std	Y+16, r25	; 0x10
    3198:	8f 87       	std	Y+15, r24	; 0x0f
    319a:	8f 85       	ldd	r24, Y+15	; 0x0f
    319c:	98 89       	ldd	r25, Y+16	; 0x10
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <main+0xdaa>
    31a2:	98 8b       	std	Y+16, r25	; 0x10
    31a4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			DIO_Write(PORTD_0,LOW);
    31a6:	88 e1       	ldi	r24, 0x18	; 24
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	0e 94 96 0a 	call	0x152c	; 0x152c <DIO_Write>
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	aa e7       	ldi	r26, 0x7A	; 122
    31b4:	b4 e4       	ldi	r27, 0x44	; 68
    31b6:	8b 87       	std	Y+11, r24	; 0x0b
    31b8:	9c 87       	std	Y+12, r25	; 0x0c
    31ba:	ad 87       	std	Y+13, r26	; 0x0d
    31bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31be:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4a ef       	ldi	r20, 0xFA	; 250
    31cc:	54 e4       	ldi	r21, 0x44	; 68
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	8f 83       	std	Y+7, r24	; 0x07
    31d8:	98 87       	std	Y+8, r25	; 0x08
    31da:	a9 87       	std	Y+9, r26	; 0x09
    31dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31de:	6f 81       	ldd	r22, Y+7	; 0x07
    31e0:	78 85       	ldd	r23, Y+8	; 0x08
    31e2:	89 85       	ldd	r24, Y+9	; 0x09
    31e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	2c f4       	brge	.+10     	; 0x3200 <main+0xe0c>
		__ticks = 1;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	3f c0       	rjmp	.+126    	; 0x327e <main+0xe8a>
	else if (__tmp > 65535)
    3200:	6f 81       	ldd	r22, Y+7	; 0x07
    3202:	78 85       	ldd	r23, Y+8	; 0x08
    3204:	89 85       	ldd	r24, Y+9	; 0x09
    3206:	9a 85       	ldd	r25, Y+10	; 0x0a
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	4c f5       	brge	.+82     	; 0x326a <main+0xe76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e2       	ldi	r20, 0x20	; 32
    3226:	51 e4       	ldi	r21, 0x41	; 65
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9e 83       	std	Y+6, r25	; 0x06
    323e:	8d 83       	std	Y+5, r24	; 0x05
    3240:	0f c0       	rjmp	.+30     	; 0x3260 <main+0xe6c>
    3242:	88 ec       	ldi	r24, 0xC8	; 200
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9c 83       	std	Y+4, r25	; 0x04
    3248:	8b 83       	std	Y+3, r24	; 0x03
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	9c 81       	ldd	r25, Y+4	; 0x04
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <main+0xe5a>
    3252:	9c 83       	std	Y+4, r25	; 0x04
    3254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3256:	8d 81       	ldd	r24, Y+5	; 0x05
    3258:	9e 81       	ldd	r25, Y+6	; 0x06
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	9e 83       	std	Y+6, r25	; 0x06
    325e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3260:	8d 81       	ldd	r24, Y+5	; 0x05
    3262:	9e 81       	ldd	r25, Y+6	; 0x06
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	69 f7       	brne	.-38     	; 0x3242 <main+0xe4e>
    3268:	14 c0       	rjmp	.+40     	; 0x3292 <main+0xe9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326a:	6f 81       	ldd	r22, Y+7	; 0x07
    326c:	78 85       	ldd	r23, Y+8	; 0x08
    326e:	89 85       	ldd	r24, Y+9	; 0x09
    3270:	9a 85       	ldd	r25, Y+10	; 0x0a
    3272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9e 83       	std	Y+6, r25	; 0x06
    327c:	8d 83       	std	Y+5, r24	; 0x05
    327e:	8d 81       	ldd	r24, Y+5	; 0x05
    3280:	9e 81       	ldd	r25, Y+6	; 0x06
    3282:	9a 83       	std	Y+2, r25	; 0x02
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <main+0xe96>
    328e:	9a 83       	std	Y+2, r25	; 0x02
    3290:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			button = NO_KEY;
    3292:	8f ef       	ldi	r24, 0xFF	; 255
    3294:	80 93 23 02 	sts	0x0223, r24
			op = 0; a=0 ; b=0;PWflag = 0;j=0;
    3298:	fe 01       	movw	r30, r28
    329a:	ed 58       	subi	r30, 0x8D	; 141
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	10 82       	st	Z, r1
    32a0:	fe 01       	movw	r30, r28
    32a2:	e6 58       	subi	r30, 0x86	; 134
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a0 e0       	ldi	r26, 0x00	; 0
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	80 83       	st	Z, r24
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	a2 83       	std	Z+2, r26	; 0x02
    32b4:	b3 83       	std	Z+3, r27	; 0x03
    32b6:	fe 01       	movw	r30, r28
    32b8:	ea 58       	subi	r30, 0x8A	; 138
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	80 83       	st	Z, r24
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	a2 83       	std	Z+2, r26	; 0x02
    32ca:	b3 83       	std	Z+3, r27	; 0x03
    32cc:	fe 01       	movw	r30, r28
    32ce:	e2 58       	subi	r30, 0x82	; 130
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	10 82       	st	Z, r1
    32d4:	fe 01       	movw	r30, r28
    32d6:	ec 58       	subi	r30, 0x8C	; 140
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	11 82       	std	Z+1, r1	; 0x01
    32dc:	10 82       	st	Z, r1
		while (button == NO_KEY)
		button = Keypad_Read();
		}
	  if(button == '=') break;
	}
	while(flag == 1){
    32de:	80 91 2a 02 	lds	r24, 0x022A
    32e2:	81 30       	cpi	r24, 0x01	; 1
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <main+0xef4>
    32e6:	e9 ce       	rjmp	.-558    	; 0x30ba <main+0xcc6>
    32e8:	10 c9       	rjmp	.-3552   	; 0x250a <main+0x116>

000032ea <KEY2NUM>:
		}
	}
}

int KEY2NUM(unit8 num)
{
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <KEY2NUM+0x6>
    32f0:	0f 92       	push	r0
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	3b 83       	std	Y+3, r19	; 0x03
    3300:	2a 83       	std	Y+2, r18	; 0x02
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	9b 81       	ldd	r25, Y+3	; 0x03
    3306:	84 33       	cpi	r24, 0x34	; 52
    3308:	91 05       	cpc	r25, r1
    330a:	09 f4       	brne	.+2      	; 0x330e <KEY2NUM+0x24>
    330c:	4b c0       	rjmp	.+150    	; 0x33a4 <KEY2NUM+0xba>
    330e:	2a 81       	ldd	r18, Y+2	; 0x02
    3310:	3b 81       	ldd	r19, Y+3	; 0x03
    3312:	25 33       	cpi	r18, 0x35	; 53
    3314:	31 05       	cpc	r19, r1
    3316:	dc f4       	brge	.+54     	; 0x334e <KEY2NUM+0x64>
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	9b 81       	ldd	r25, Y+3	; 0x03
    331c:	81 33       	cpi	r24, 0x31	; 49
    331e:	91 05       	cpc	r25, r1
    3320:	c1 f1       	breq	.+112    	; 0x3392 <KEY2NUM+0xa8>
    3322:	2a 81       	ldd	r18, Y+2	; 0x02
    3324:	3b 81       	ldd	r19, Y+3	; 0x03
    3326:	22 33       	cpi	r18, 0x32	; 50
    3328:	31 05       	cpc	r19, r1
    332a:	34 f4       	brge	.+12     	; 0x3338 <KEY2NUM+0x4e>
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	9b 81       	ldd	r25, Y+3	; 0x03
    3330:	80 33       	cpi	r24, 0x30	; 48
    3332:	91 05       	cpc	r25, r1
    3334:	61 f1       	breq	.+88     	; 0x338e <KEY2NUM+0xa4>
    3336:	47 c0       	rjmp	.+142    	; 0x33c6 <KEY2NUM+0xdc>
    3338:	2a 81       	ldd	r18, Y+2	; 0x02
    333a:	3b 81       	ldd	r19, Y+3	; 0x03
    333c:	22 33       	cpi	r18, 0x32	; 50
    333e:	31 05       	cpc	r19, r1
    3340:	59 f1       	breq	.+86     	; 0x3398 <KEY2NUM+0xae>
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	9b 81       	ldd	r25, Y+3	; 0x03
    3346:	83 33       	cpi	r24, 0x33	; 51
    3348:	91 05       	cpc	r25, r1
    334a:	49 f1       	breq	.+82     	; 0x339e <KEY2NUM+0xb4>
    334c:	3c c0       	rjmp	.+120    	; 0x33c6 <KEY2NUM+0xdc>
    334e:	2a 81       	ldd	r18, Y+2	; 0x02
    3350:	3b 81       	ldd	r19, Y+3	; 0x03
    3352:	27 33       	cpi	r18, 0x37	; 55
    3354:	31 05       	cpc	r19, r1
    3356:	79 f1       	breq	.+94     	; 0x33b6 <KEY2NUM+0xcc>
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	9b 81       	ldd	r25, Y+3	; 0x03
    335c:	88 33       	cpi	r24, 0x38	; 56
    335e:	91 05       	cpc	r25, r1
    3360:	5c f4       	brge	.+22     	; 0x3378 <KEY2NUM+0x8e>
    3362:	2a 81       	ldd	r18, Y+2	; 0x02
    3364:	3b 81       	ldd	r19, Y+3	; 0x03
    3366:	25 33       	cpi	r18, 0x35	; 53
    3368:	31 05       	cpc	r19, r1
    336a:	f9 f0       	breq	.+62     	; 0x33aa <KEY2NUM+0xc0>
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	9b 81       	ldd	r25, Y+3	; 0x03
    3370:	86 33       	cpi	r24, 0x36	; 54
    3372:	91 05       	cpc	r25, r1
    3374:	e9 f0       	breq	.+58     	; 0x33b0 <KEY2NUM+0xc6>
    3376:	27 c0       	rjmp	.+78     	; 0x33c6 <KEY2NUM+0xdc>
    3378:	2a 81       	ldd	r18, Y+2	; 0x02
    337a:	3b 81       	ldd	r19, Y+3	; 0x03
    337c:	28 33       	cpi	r18, 0x38	; 56
    337e:	31 05       	cpc	r19, r1
    3380:	e9 f0       	breq	.+58     	; 0x33bc <KEY2NUM+0xd2>
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	89 33       	cpi	r24, 0x39	; 57
    3388:	91 05       	cpc	r25, r1
    338a:	d9 f0       	breq	.+54     	; 0x33c2 <KEY2NUM+0xd8>
    338c:	1c c0       	rjmp	.+56     	; 0x33c6 <KEY2NUM+0xdc>
	{
	case '0': num = 0; break;
    338e:	19 82       	std	Y+1, r1	; 0x01
    3390:	1a c0       	rjmp	.+52     	; 0x33c6 <KEY2NUM+0xdc>
	case '1': num = 1; break;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	17 c0       	rjmp	.+46     	; 0x33c6 <KEY2NUM+0xdc>
	case '2': num = 2; break;
    3398:	82 e0       	ldi	r24, 0x02	; 2
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	14 c0       	rjmp	.+40     	; 0x33c6 <KEY2NUM+0xdc>
	case '3': num = 3; break;
    339e:	83 e0       	ldi	r24, 0x03	; 3
    33a0:	89 83       	std	Y+1, r24	; 0x01
    33a2:	11 c0       	rjmp	.+34     	; 0x33c6 <KEY2NUM+0xdc>
	case '4': num = 4; break;
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	0e c0       	rjmp	.+28     	; 0x33c6 <KEY2NUM+0xdc>
	case '5': num = 5; break;
    33aa:	85 e0       	ldi	r24, 0x05	; 5
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	0b c0       	rjmp	.+22     	; 0x33c6 <KEY2NUM+0xdc>
	case '6': num = 6; break;
    33b0:	86 e0       	ldi	r24, 0x06	; 6
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	08 c0       	rjmp	.+16     	; 0x33c6 <KEY2NUM+0xdc>
	case '7': num = 7; break;
    33b6:	87 e0       	ldi	r24, 0x07	; 7
    33b8:	89 83       	std	Y+1, r24	; 0x01
    33ba:	05 c0       	rjmp	.+10     	; 0x33c6 <KEY2NUM+0xdc>
	case '8': num = 8; break;
    33bc:	88 e0       	ldi	r24, 0x08	; 8
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <KEY2NUM+0xdc>
	case '9': num = 9; break;
    33c2:	89 e0       	ldi	r24, 0x09	; 9
    33c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return num;
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <NUM2KEY>:

void NUM2KEY(int x)
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	00 d0       	rcall	.+0      	; 0x33de <NUM2KEY+0x6>
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <NUM2KEY+0x8>
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
	switch(x)
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	9a 81       	ldd	r25, Y+2	; 0x02
    33ec:	9c 83       	std	Y+4, r25	; 0x04
    33ee:	8b 83       	std	Y+3, r24	; 0x03
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	84 30       	cpi	r24, 0x04	; 4
    33f6:	91 05       	cpc	r25, r1
    33f8:	09 f4       	brne	.+2      	; 0x33fc <NUM2KEY+0x24>
    33fa:	4f c0       	rjmp	.+158    	; 0x349a <NUM2KEY+0xc2>
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3400:	85 30       	cpi	r24, 0x05	; 5
    3402:	91 05       	cpc	r25, r1
    3404:	d4 f4       	brge	.+52     	; 0x343a <NUM2KEY+0x62>
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	9c 81       	ldd	r25, Y+4	; 0x04
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	91 05       	cpc	r25, r1
    340e:	c9 f1       	breq	.+114    	; 0x3482 <NUM2KEY+0xaa>
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	82 30       	cpi	r24, 0x02	; 2
    3416:	91 05       	cpc	r25, r1
    3418:	2c f4       	brge	.+10     	; 0x3424 <NUM2KEY+0x4c>
    341a:	8b 81       	ldd	r24, Y+3	; 0x03
    341c:	9c 81       	ldd	r25, Y+4	; 0x04
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	61 f1       	breq	.+88     	; 0x347a <NUM2KEY+0xa2>
    3422:	52 c0       	rjmp	.+164    	; 0x34c8 <NUM2KEY+0xf0>
    3424:	8b 81       	ldd	r24, Y+3	; 0x03
    3426:	9c 81       	ldd	r25, Y+4	; 0x04
    3428:	82 30       	cpi	r24, 0x02	; 2
    342a:	91 05       	cpc	r25, r1
    342c:	71 f1       	breq	.+92     	; 0x348a <NUM2KEY+0xb2>
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	9c 81       	ldd	r25, Y+4	; 0x04
    3432:	83 30       	cpi	r24, 0x03	; 3
    3434:	91 05       	cpc	r25, r1
    3436:	69 f1       	breq	.+90     	; 0x3492 <NUM2KEY+0xba>
    3438:	47 c0       	rjmp	.+142    	; 0x34c8 <NUM2KEY+0xf0>
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	87 30       	cpi	r24, 0x07	; 7
    3440:	91 05       	cpc	r25, r1
    3442:	b9 f1       	breq	.+110    	; 0x34b2 <NUM2KEY+0xda>
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	88 30       	cpi	r24, 0x08	; 8
    344a:	91 05       	cpc	r25, r1
    344c:	5c f4       	brge	.+22     	; 0x3464 <NUM2KEY+0x8c>
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	9c 81       	ldd	r25, Y+4	; 0x04
    3452:	85 30       	cpi	r24, 0x05	; 5
    3454:	91 05       	cpc	r25, r1
    3456:	29 f1       	breq	.+74     	; 0x34a2 <NUM2KEY+0xca>
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	9c 81       	ldd	r25, Y+4	; 0x04
    345c:	86 30       	cpi	r24, 0x06	; 6
    345e:	91 05       	cpc	r25, r1
    3460:	21 f1       	breq	.+72     	; 0x34aa <NUM2KEY+0xd2>
    3462:	32 c0       	rjmp	.+100    	; 0x34c8 <NUM2KEY+0xf0>
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	88 30       	cpi	r24, 0x08	; 8
    346a:	91 05       	cpc	r25, r1
    346c:	31 f1       	breq	.+76     	; 0x34ba <NUM2KEY+0xe2>
    346e:	8b 81       	ldd	r24, Y+3	; 0x03
    3470:	9c 81       	ldd	r25, Y+4	; 0x04
    3472:	89 30       	cpi	r24, 0x09	; 9
    3474:	91 05       	cpc	r25, r1
    3476:	29 f1       	breq	.+74     	; 0x34c2 <NUM2KEY+0xea>
    3478:	27 c0       	rjmp	.+78     	; 0x34c8 <NUM2KEY+0xf0>
	{
	case 0:  LCD_SendData('0'); break;
    347a:	80 e3       	ldi	r24, 0x30	; 48
    347c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    3480:	23 c0       	rjmp	.+70     	; 0x34c8 <NUM2KEY+0xf0>
	case 1:  LCD_SendData('1'); break;
    3482:	81 e3       	ldi	r24, 0x31	; 49
    3484:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    3488:	1f c0       	rjmp	.+62     	; 0x34c8 <NUM2KEY+0xf0>
	case 2:  LCD_SendData('2'); break;
    348a:	82 e3       	ldi	r24, 0x32	; 50
    348c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    3490:	1b c0       	rjmp	.+54     	; 0x34c8 <NUM2KEY+0xf0>
	case 3:  LCD_SendData('3'); break;
    3492:	83 e3       	ldi	r24, 0x33	; 51
    3494:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    3498:	17 c0       	rjmp	.+46     	; 0x34c8 <NUM2KEY+0xf0>
	case 4:  LCD_SendData('4'); break;
    349a:	84 e3       	ldi	r24, 0x34	; 52
    349c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    34a0:	13 c0       	rjmp	.+38     	; 0x34c8 <NUM2KEY+0xf0>
	case 5:  LCD_SendData('5'); break;
    34a2:	85 e3       	ldi	r24, 0x35	; 53
    34a4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <NUM2KEY+0xf0>
	case 6:  LCD_SendData('6'); break;
    34aa:	86 e3       	ldi	r24, 0x36	; 54
    34ac:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    34b0:	0b c0       	rjmp	.+22     	; 0x34c8 <NUM2KEY+0xf0>
	case 7:  LCD_SendData('7'); break;
    34b2:	87 e3       	ldi	r24, 0x37	; 55
    34b4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    34b8:	07 c0       	rjmp	.+14     	; 0x34c8 <NUM2KEY+0xf0>
	case 8:  LCD_SendData('8'); break;
    34ba:	88 e3       	ldi	r24, 0x38	; 56
    34bc:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
    34c0:	03 c0       	rjmp	.+6      	; 0x34c8 <NUM2KEY+0xf0>
	case 9:  LCD_SendData('9'); break;
    34c2:	89 e3       	ldi	r24, 0x39	; 57
    34c4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
	}
}
    34c8:	0f 90       	pop	r0
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <operation>:

void operation(float a,unit8 op,float b)
{
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	df 93       	push	r29
    34dc:	cf 93       	push	r28
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	67 97       	sbiw	r28, 0x17	; 23
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	6d 87       	std	Y+13, r22	; 0x0d
    34f0:	7e 87       	std	Y+14, r23	; 0x0e
    34f2:	8f 87       	std	Y+15, r24	; 0x0f
    34f4:	98 8b       	std	Y+16, r25	; 0x10
    34f6:	49 8b       	std	Y+17, r20	; 0x11
    34f8:	0a 8b       	std	Y+18, r16	; 0x12
    34fa:	1b 8b       	std	Y+19, r17	; 0x13
    34fc:	2c 8b       	std	Y+20, r18	; 0x14
    34fe:	3d 8b       	std	Y+21, r19	; 0x15
	float ans;
	int count = 0;
    3500:	18 86       	std	Y+8, r1	; 0x08
    3502:	1f 82       	std	Y+7, r1	; 0x07
	int mul = 1;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9e 83       	std	Y+6, r25	; 0x06
    350a:	8d 83       	std	Y+5, r24	; 0x05
	switch(op)
    350c:	89 89       	ldd	r24, Y+17	; 0x11
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	3f 8b       	std	Y+23, r19	; 0x17
    3514:	2e 8b       	std	Y+22, r18	; 0x16
    3516:	8e 89       	ldd	r24, Y+22	; 0x16
    3518:	9f 89       	ldd	r25, Y+23	; 0x17
    351a:	8b 32       	cpi	r24, 0x2B	; 43
    351c:	91 05       	cpc	r25, r1
    351e:	c1 f0       	breq	.+48     	; 0x3550 <operation+0x7a>
    3520:	2e 89       	ldd	r18, Y+22	; 0x16
    3522:	3f 89       	ldd	r19, Y+23	; 0x17
    3524:	2c 32       	cpi	r18, 0x2C	; 44
    3526:	31 05       	cpc	r19, r1
    3528:	3c f4       	brge	.+14     	; 0x3538 <operation+0x62>
    352a:	8e 89       	ldd	r24, Y+22	; 0x16
    352c:	9f 89       	ldd	r25, Y+23	; 0x17
    352e:	8a 32       	cpi	r24, 0x2A	; 42
    3530:	91 05       	cpc	r25, r1
    3532:	09 f4       	brne	.+2      	; 0x3536 <operation+0x60>
    3534:	47 c0       	rjmp	.+142    	; 0x35c4 <operation+0xee>
    3536:	67 c0       	rjmp	.+206    	; 0x3606 <operation+0x130>
    3538:	2e 89       	ldd	r18, Y+22	; 0x16
    353a:	3f 89       	ldd	r19, Y+23	; 0x17
    353c:	2d 32       	cpi	r18, 0x2D	; 45
    353e:	31 05       	cpc	r19, r1
    3540:	c1 f0       	breq	.+48     	; 0x3572 <operation+0x9c>
    3542:	8e 89       	ldd	r24, Y+22	; 0x16
    3544:	9f 89       	ldd	r25, Y+23	; 0x17
    3546:	8f 32       	cpi	r24, 0x2F	; 47
    3548:	91 05       	cpc	r25, r1
    354a:	09 f4       	brne	.+2      	; 0x354e <operation+0x78>
    354c:	4c c0       	rjmp	.+152    	; 0x35e6 <operation+0x110>
    354e:	5b c0       	rjmp	.+182    	; 0x3606 <operation+0x130>
	{
	case '+': ans = a + b ; break;
    3550:	6d 85       	ldd	r22, Y+13	; 0x0d
    3552:	7e 85       	ldd	r23, Y+14	; 0x0e
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	2a 89       	ldd	r18, Y+18	; 0x12
    355a:	3b 89       	ldd	r19, Y+19	; 0x13
    355c:	4c 89       	ldd	r20, Y+20	; 0x14
    355e:	5d 89       	ldd	r21, Y+21	; 0x15
    3560:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	89 87       	std	Y+9, r24	; 0x09
    356a:	9a 87       	std	Y+10, r25	; 0x0a
    356c:	ab 87       	std	Y+11, r26	; 0x0b
    356e:	bc 87       	std	Y+12, r27	; 0x0c
    3570:	4a c0       	rjmp	.+148    	; 0x3606 <operation+0x130>
	case '-':
		ans = a - b ;
    3572:	6d 85       	ldd	r22, Y+13	; 0x0d
    3574:	7e 85       	ldd	r23, Y+14	; 0x0e
    3576:	8f 85       	ldd	r24, Y+15	; 0x0f
    3578:	98 89       	ldd	r25, Y+16	; 0x10
    357a:	2a 89       	ldd	r18, Y+18	; 0x12
    357c:	3b 89       	ldd	r19, Y+19	; 0x13
    357e:	4c 89       	ldd	r20, Y+20	; 0x14
    3580:	5d 89       	ldd	r21, Y+21	; 0x15
    3582:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	89 87       	std	Y+9, r24	; 0x09
    358c:	9a 87       	std	Y+10, r25	; 0x0a
    358e:	ab 87       	std	Y+11, r26	; 0x0b
    3590:	bc 87       	std	Y+12, r27	; 0x0c
	    if(ans < 0)
    3592:	69 85       	ldd	r22, Y+9	; 0x09
    3594:	7a 85       	ldd	r23, Y+10	; 0x0a
    3596:	8b 85       	ldd	r24, Y+11	; 0x0b
    3598:	9c 85       	ldd	r25, Y+12	; 0x0c
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e0       	ldi	r20, 0x00	; 0
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	74 f5       	brge	.+92     	; 0x3606 <operation+0x130>
	    	{
	    	LCD_SendData('-');
    35aa:	8d e2       	ldi	r24, 0x2D	; 45
    35ac:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
	    	ans*=-1;
    35b0:	89 85       	ldd	r24, Y+9	; 0x09
    35b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    35b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    35b8:	b0 58       	subi	r27, 0x80	; 128
    35ba:	89 87       	std	Y+9, r24	; 0x09
    35bc:	9a 87       	std	Y+10, r25	; 0x0a
    35be:	ab 87       	std	Y+11, r26	; 0x0b
    35c0:	bc 87       	std	Y+12, r27	; 0x0c
    35c2:	21 c0       	rjmp	.+66     	; 0x3606 <operation+0x130>
	    	}
	     break;
	case '*': ans = a * b ; break;
    35c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    35c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    35c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ca:	98 89       	ldd	r25, Y+16	; 0x10
    35cc:	2a 89       	ldd	r18, Y+18	; 0x12
    35ce:	3b 89       	ldd	r19, Y+19	; 0x13
    35d0:	4c 89       	ldd	r20, Y+20	; 0x14
    35d2:	5d 89       	ldd	r21, Y+21	; 0x15
    35d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	89 87       	std	Y+9, r24	; 0x09
    35de:	9a 87       	std	Y+10, r25	; 0x0a
    35e0:	ab 87       	std	Y+11, r26	; 0x0b
    35e2:	bc 87       	std	Y+12, r27	; 0x0c
    35e4:	10 c0       	rjmp	.+32     	; 0x3606 <operation+0x130>
	case '/': ans = a / b ; break;
    35e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    35e8:	7e 85       	ldd	r23, Y+14	; 0x0e
    35ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ec:	98 89       	ldd	r25, Y+16	; 0x10
    35ee:	2a 89       	ldd	r18, Y+18	; 0x12
    35f0:	3b 89       	ldd	r19, Y+19	; 0x13
    35f2:	4c 89       	ldd	r20, Y+20	; 0x14
    35f4:	5d 89       	ldd	r21, Y+21	; 0x15
    35f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	89 87       	std	Y+9, r24	; 0x09
    3600:	9a 87       	std	Y+10, r25	; 0x0a
    3602:	ab 87       	std	Y+11, r26	; 0x0b
    3604:	bc 87       	std	Y+12, r27	; 0x0c
	}

   long int temp = ans*100;
    3606:	69 85       	ldd	r22, Y+9	; 0x09
    3608:	7a 85       	ldd	r23, Y+10	; 0x0a
    360a:	8b 85       	ldd	r24, Y+11	; 0x0b
    360c:	9c 85       	ldd	r25, Y+12	; 0x0c
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	48 ec       	ldi	r20, 0xC8	; 200
    3614:	52 e4       	ldi	r21, 0x42	; 66
    3616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	bc 01       	movw	r22, r24
    3620:	cd 01       	movw	r24, r26
    3622:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	89 83       	std	Y+1, r24	; 0x01
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	ab 83       	std	Y+3, r26	; 0x03
    3630:	bc 83       	std	Y+4, r27	; 0x04
    3632:	17 c0       	rjmp	.+46     	; 0x3662 <operation+0x18c>

	while(temp!=0)
	{
		count++;
    3634:	8f 81       	ldd	r24, Y+7	; 0x07
    3636:	98 85       	ldd	r25, Y+8	; 0x08
    3638:	01 96       	adiw	r24, 0x01	; 1
    363a:	98 87       	std	Y+8, r25	; 0x08
    363c:	8f 83       	std	Y+7, r24	; 0x07
		temp/=10;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	ab 81       	ldd	r26, Y+3	; 0x03
    3644:	bc 81       	ldd	r27, Y+4	; 0x04
    3646:	2a e0       	ldi	r18, 0x0A	; 10
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	bc 01       	movw	r22, r24
    3650:	cd 01       	movw	r24, r26
    3652:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__divmodsi4>
    3656:	da 01       	movw	r26, r20
    3658:	c9 01       	movw	r24, r18
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	ab 83       	std	Y+3, r26	; 0x03
    3660:	bc 83       	std	Y+4, r27	; 0x04
	case '/': ans = a / b ; break;
	}

   long int temp = ans*100;

	while(temp!=0)
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	9a 81       	ldd	r25, Y+2	; 0x02
    3666:	ab 81       	ldd	r26, Y+3	; 0x03
    3668:	bc 81       	ldd	r27, Y+4	; 0x04
    366a:	00 97       	sbiw	r24, 0x00	; 0
    366c:	a1 05       	cpc	r26, r1
    366e:	b1 05       	cpc	r27, r1
    3670:	09 f7       	brne	.-62     	; 0x3634 <operation+0x15e>
    3672:	13 c0       	rjmp	.+38     	; 0x369a <operation+0x1c4>
	{
		count++;
		temp/=10;
	}

	for(;count!=1;count--) mul*=10;
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	9c 01       	movw	r18, r24
    367a:	22 0f       	add	r18, r18
    367c:	33 1f       	adc	r19, r19
    367e:	c9 01       	movw	r24, r18
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	88 0f       	add	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	82 0f       	add	r24, r18
    368a:	93 1f       	adc	r25, r19
    368c:	9e 83       	std	Y+6, r25	; 0x06
    368e:	8d 83       	std	Y+5, r24	; 0x05
    3690:	8f 81       	ldd	r24, Y+7	; 0x07
    3692:	98 85       	ldd	r25, Y+8	; 0x08
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	98 87       	std	Y+8, r25	; 0x08
    3698:	8f 83       	std	Y+7, r24	; 0x07
    369a:	8f 81       	ldd	r24, Y+7	; 0x07
    369c:	98 85       	ldd	r25, Y+8	; 0x08
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	91 05       	cpc	r25, r1
    36a2:	41 f7       	brne	.-48     	; 0x3674 <operation+0x19e>
	temp = ans*100;
    36a4:	69 85       	ldd	r22, Y+9	; 0x09
    36a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    36a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    36aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	48 ec       	ldi	r20, 0xC8	; 200
    36b2:	52 e4       	ldi	r21, 0x42	; 66
    36b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	bc 01       	movw	r22, r24
    36be:	cd 01       	movw	r24, r26
    36c0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    36c4:	dc 01       	movw	r26, r24
    36c6:	cb 01       	movw	r24, r22
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	ab 83       	std	Y+3, r26	; 0x03
    36ce:	bc 83       	std	Y+4, r27	; 0x04
    36d0:	2f c0       	rjmp	.+94     	; 0x3730 <operation+0x25a>
	while(mul!=0)
	{
		if(mul == 10) LCD_SendData('.');
    36d2:	8d 81       	ldd	r24, Y+5	; 0x05
    36d4:	9e 81       	ldd	r25, Y+6	; 0x06
    36d6:	8a 30       	cpi	r24, 0x0A	; 10
    36d8:	91 05       	cpc	r25, r1
    36da:	19 f4       	brne	.+6      	; 0x36e2 <operation+0x20c>
    36dc:	8e e2       	ldi	r24, 0x2E	; 46
    36de:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <LCD_SendData>
		NUM2KEY((temp/mul)%10);
    36e2:	8d 81       	ldd	r24, Y+5	; 0x05
    36e4:	9e 81       	ldd	r25, Y+6	; 0x06
    36e6:	9c 01       	movw	r18, r24
    36e8:	44 27       	eor	r20, r20
    36ea:	37 fd       	sbrc	r19, 7
    36ec:	40 95       	com	r20
    36ee:	54 2f       	mov	r21, r20
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	ab 81       	ldd	r26, Y+3	; 0x03
    36f6:	bc 81       	ldd	r27, Y+4	; 0x04
    36f8:	bc 01       	movw	r22, r24
    36fa:	cd 01       	movw	r24, r26
    36fc:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__divmodsi4>
    3700:	da 01       	movw	r26, r20
    3702:	c9 01       	movw	r24, r18
    3704:	2a e0       	ldi	r18, 0x0A	; 10
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	bc 01       	movw	r22, r24
    370e:	cd 01       	movw	r24, r26
    3710:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__divmodsi4>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <NUM2KEY>
		mul/=10;
    371c:	8d 81       	ldd	r24, Y+5	; 0x05
    371e:	9e 81       	ldd	r25, Y+6	; 0x06
    3720:	2a e0       	ldi	r18, 0x0A	; 10
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	b9 01       	movw	r22, r18
    3726:	0e 94 a7 1b 	call	0x374e	; 0x374e <__divmodhi4>
    372a:	cb 01       	movw	r24, r22
    372c:	9e 83       	std	Y+6, r25	; 0x06
    372e:	8d 83       	std	Y+5, r24	; 0x05
		temp/=10;
	}

	for(;count!=1;count--) mul*=10;
	temp = ans*100;
	while(mul!=0)
    3730:	8d 81       	ldd	r24, Y+5	; 0x05
    3732:	9e 81       	ldd	r25, Y+6	; 0x06
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	69 f6       	brne	.-102    	; 0x36d2 <operation+0x1fc>
		if(mul == 10) LCD_SendData('.');
		NUM2KEY((temp/mul)%10);
		mul/=10;

	}
}
    3738:	67 96       	adiw	r28, 0x17	; 23
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	08 95       	ret

0000374e <__divmodhi4>:
    374e:	97 fb       	bst	r25, 7
    3750:	09 2e       	mov	r0, r25
    3752:	07 26       	eor	r0, r23
    3754:	0a d0       	rcall	.+20     	; 0x376a <__divmodhi4_neg1>
    3756:	77 fd       	sbrc	r23, 7
    3758:	04 d0       	rcall	.+8      	; 0x3762 <__divmodhi4_neg2>
    375a:	27 d0       	rcall	.+78     	; 0x37aa <__udivmodhi4>
    375c:	06 d0       	rcall	.+12     	; 0x376a <__divmodhi4_neg1>
    375e:	00 20       	and	r0, r0
    3760:	1a f4       	brpl	.+6      	; 0x3768 <__divmodhi4_exit>

00003762 <__divmodhi4_neg2>:
    3762:	70 95       	com	r23
    3764:	61 95       	neg	r22
    3766:	7f 4f       	sbci	r23, 0xFF	; 255

00003768 <__divmodhi4_exit>:
    3768:	08 95       	ret

0000376a <__divmodhi4_neg1>:
    376a:	f6 f7       	brtc	.-4      	; 0x3768 <__divmodhi4_exit>
    376c:	90 95       	com	r25
    376e:	81 95       	neg	r24
    3770:	9f 4f       	sbci	r25, 0xFF	; 255
    3772:	08 95       	ret

00003774 <__divmodsi4>:
    3774:	97 fb       	bst	r25, 7
    3776:	09 2e       	mov	r0, r25
    3778:	05 26       	eor	r0, r21
    377a:	0e d0       	rcall	.+28     	; 0x3798 <__divmodsi4_neg1>
    377c:	57 fd       	sbrc	r21, 7
    377e:	04 d0       	rcall	.+8      	; 0x3788 <__divmodsi4_neg2>
    3780:	28 d0       	rcall	.+80     	; 0x37d2 <__udivmodsi4>
    3782:	0a d0       	rcall	.+20     	; 0x3798 <__divmodsi4_neg1>
    3784:	00 1c       	adc	r0, r0
    3786:	38 f4       	brcc	.+14     	; 0x3796 <__divmodsi4_exit>

00003788 <__divmodsi4_neg2>:
    3788:	50 95       	com	r21
    378a:	40 95       	com	r20
    378c:	30 95       	com	r19
    378e:	21 95       	neg	r18
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	4f 4f       	sbci	r20, 0xFF	; 255
    3794:	5f 4f       	sbci	r21, 0xFF	; 255

00003796 <__divmodsi4_exit>:
    3796:	08 95       	ret

00003798 <__divmodsi4_neg1>:
    3798:	f6 f7       	brtc	.-4      	; 0x3796 <__divmodsi4_exit>
    379a:	90 95       	com	r25
    379c:	80 95       	com	r24
    379e:	70 95       	com	r23
    37a0:	61 95       	neg	r22
    37a2:	7f 4f       	sbci	r23, 0xFF	; 255
    37a4:	8f 4f       	sbci	r24, 0xFF	; 255
    37a6:	9f 4f       	sbci	r25, 0xFF	; 255
    37a8:	08 95       	ret

000037aa <__udivmodhi4>:
    37aa:	aa 1b       	sub	r26, r26
    37ac:	bb 1b       	sub	r27, r27
    37ae:	51 e1       	ldi	r21, 0x11	; 17
    37b0:	07 c0       	rjmp	.+14     	; 0x37c0 <__udivmodhi4_ep>

000037b2 <__udivmodhi4_loop>:
    37b2:	aa 1f       	adc	r26, r26
    37b4:	bb 1f       	adc	r27, r27
    37b6:	a6 17       	cp	r26, r22
    37b8:	b7 07       	cpc	r27, r23
    37ba:	10 f0       	brcs	.+4      	; 0x37c0 <__udivmodhi4_ep>
    37bc:	a6 1b       	sub	r26, r22
    37be:	b7 0b       	sbc	r27, r23

000037c0 <__udivmodhi4_ep>:
    37c0:	88 1f       	adc	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	5a 95       	dec	r21
    37c6:	a9 f7       	brne	.-22     	; 0x37b2 <__udivmodhi4_loop>
    37c8:	80 95       	com	r24
    37ca:	90 95       	com	r25
    37cc:	bc 01       	movw	r22, r24
    37ce:	cd 01       	movw	r24, r26
    37d0:	08 95       	ret

000037d2 <__udivmodsi4>:
    37d2:	a1 e2       	ldi	r26, 0x21	; 33
    37d4:	1a 2e       	mov	r1, r26
    37d6:	aa 1b       	sub	r26, r26
    37d8:	bb 1b       	sub	r27, r27
    37da:	fd 01       	movw	r30, r26
    37dc:	0d c0       	rjmp	.+26     	; 0x37f8 <__udivmodsi4_ep>

000037de <__udivmodsi4_loop>:
    37de:	aa 1f       	adc	r26, r26
    37e0:	bb 1f       	adc	r27, r27
    37e2:	ee 1f       	adc	r30, r30
    37e4:	ff 1f       	adc	r31, r31
    37e6:	a2 17       	cp	r26, r18
    37e8:	b3 07       	cpc	r27, r19
    37ea:	e4 07       	cpc	r30, r20
    37ec:	f5 07       	cpc	r31, r21
    37ee:	20 f0       	brcs	.+8      	; 0x37f8 <__udivmodsi4_ep>
    37f0:	a2 1b       	sub	r26, r18
    37f2:	b3 0b       	sbc	r27, r19
    37f4:	e4 0b       	sbc	r30, r20
    37f6:	f5 0b       	sbc	r31, r21

000037f8 <__udivmodsi4_ep>:
    37f8:	66 1f       	adc	r22, r22
    37fa:	77 1f       	adc	r23, r23
    37fc:	88 1f       	adc	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	1a 94       	dec	r1
    3802:	69 f7       	brne	.-38     	; 0x37de <__udivmodsi4_loop>
    3804:	60 95       	com	r22
    3806:	70 95       	com	r23
    3808:	80 95       	com	r24
    380a:	90 95       	com	r25
    380c:	9b 01       	movw	r18, r22
    380e:	ac 01       	movw	r20, r24
    3810:	bd 01       	movw	r22, r26
    3812:	cf 01       	movw	r24, r30
    3814:	08 95       	ret

00003816 <__prologue_saves__>:
    3816:	2f 92       	push	r2
    3818:	3f 92       	push	r3
    381a:	4f 92       	push	r4
    381c:	5f 92       	push	r5
    381e:	6f 92       	push	r6
    3820:	7f 92       	push	r7
    3822:	8f 92       	push	r8
    3824:	9f 92       	push	r9
    3826:	af 92       	push	r10
    3828:	bf 92       	push	r11
    382a:	cf 92       	push	r12
    382c:	df 92       	push	r13
    382e:	ef 92       	push	r14
    3830:	ff 92       	push	r15
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	ca 1b       	sub	r28, r26
    3840:	db 0b       	sbc	r29, r27
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	de bf       	out	0x3e, r29	; 62
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	cd bf       	out	0x3d, r28	; 61
    384c:	09 94       	ijmp

0000384e <__epilogue_restores__>:
    384e:	2a 88       	ldd	r2, Y+18	; 0x12
    3850:	39 88       	ldd	r3, Y+17	; 0x11
    3852:	48 88       	ldd	r4, Y+16	; 0x10
    3854:	5f 84       	ldd	r5, Y+15	; 0x0f
    3856:	6e 84       	ldd	r6, Y+14	; 0x0e
    3858:	7d 84       	ldd	r7, Y+13	; 0x0d
    385a:	8c 84       	ldd	r8, Y+12	; 0x0c
    385c:	9b 84       	ldd	r9, Y+11	; 0x0b
    385e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3860:	b9 84       	ldd	r11, Y+9	; 0x09
    3862:	c8 84       	ldd	r12, Y+8	; 0x08
    3864:	df 80       	ldd	r13, Y+7	; 0x07
    3866:	ee 80       	ldd	r14, Y+6	; 0x06
    3868:	fd 80       	ldd	r15, Y+5	; 0x05
    386a:	0c 81       	ldd	r16, Y+4	; 0x04
    386c:	1b 81       	ldd	r17, Y+3	; 0x03
    386e:	aa 81       	ldd	r26, Y+2	; 0x02
    3870:	b9 81       	ldd	r27, Y+1	; 0x01
    3872:	ce 0f       	add	r28, r30
    3874:	d1 1d       	adc	r29, r1
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	ed 01       	movw	r28, r26
    3882:	08 95       	ret

00003884 <_exit>:
    3884:	f8 94       	cli

00003886 <__stop_program>:
    3886:	ff cf       	rjmp	.-2      	; 0x3886 <__stop_program>
